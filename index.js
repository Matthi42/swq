// Generated by purs bundle 0.14.7
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];
  var alt = function (dict) {
      return dict.alt;
  };
  exports["alt"] = alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var applyArray = {
      apply: $foreign.arrayApply,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];          
  var discard = function (dict) {
      return dict.discard;
  };
  var bindArray = {
      bind: $foreign.arrayBind,
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = {
      discard: function (dictBind) {
          return bind(dictBind);
      }
  };
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var eqString = {
      eq: $foreign.eqStringImpl
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  var eqChar = {
      eq: $foreign.eqCharImpl
  };
  var eqBoolean = {
      eq: $foreign.eqBooleanImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS);
(function(exports) {
  "use strict";

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];                  
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var showString = {
      show: $foreign.showStringImpl
  };
  var showRecordFieldsNil = {
      showRecordFields: function (v) {
          return function (v1) {
              return [  ];
          };
      }
  };
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function () {
      return function (dictShowRecordFields) {
          return {
              show: function (record) {
                  var v = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                  if (v.length === 0) {
                      return "{}";
                  };
                  return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
              }
          };
      };
  };
  var showChar = {
      show: $foreign.showCharImpl
  };
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return {
          show: $foreign.showArrayImpl(show(dictShow))
      };
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return {
                  showRecordFields: function (v) {
                      return function (record) {
                          var tail = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                          var focus = Record_Unsafe.unsafeGet(key)(record);
                          return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                      };
                  }
              };
          };
      };
  };
  exports["show"] = show;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];                
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return {
          show: function (v) {
              if (v instanceof Just) {
                  return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Nothing) {
                  return "Nothing";
              };
              throw new Error("Failed pattern match at Data.Maybe (line 216, column 1 - line 218, column 28): " + [ v.constructor.name ]);
          }
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function () {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var eqMaybe = function (dictEq) {
      return {
          eq: function (x) {
              return function (y) {
                  if (x instanceof Nothing && y instanceof Nothing) {
                      return true;
                  };
                  if (x instanceof Just && y instanceof Just) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  return false;
              };
          }
      };
  };
  var applyMaybe = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return Data_Functor.map(functorMaybe)(v.value0)(v1);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var bindMaybe = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return v1(v.value0);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyMaybe;
      }
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["showMaybe"] = showMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var semigroupUnit = {
      append: function (v) {
          return function (v1) {
              return Data_Unit.unit;
          };
      }
  };
  var semigroupString = {
      append: $foreign.concatString
  };
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                  
  var monoidUnit = {
      mempty: Data_Unit.unit,
      Semigroup0: function () {
          return Data_Semigroup.semigroupUnit;
      }
  };
  var monoidString = {
      mempty: "",
      Semigroup0: function () {
          return Data_Semigroup.semigroupString;
      }
  };
  var monoidArray = {
      mempty: [  ],
      Semigroup0: function () {
          return Data_Semigroup.semigroupArray;
      }
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var $$null = function (dictFoldable) {
      return foldr(dictFoldable)(function (v) {
          return function (v1) {
              return false;
          };
      })(true);
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["traverse_"] = traverse_;
  exports["intercalate"] = intercalate;
  exports["find"] = find;
  exports["null"] = $$null;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];
  var empty = function (dict) {
      return dict.empty;
  };
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Functor = $PS["Data.Functor"];                      
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return {
          map: function (f) {
              return function (m) {
                  return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
              };
          }
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["functorNonEmpty"] = functorNonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var semigroupNonEmptyList = {
      append: function (v) {
          return function (as$prime) {
              return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
          };
      }
  };
  var applyList = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorList;
      }
  };
  var applyNonEmptyList = {
      apply: function (v) {
          return function (v1) {
              return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
          };
      },
      Functor0: function () {
          return functorNonEmptyList;
      }
  };
  var altList = {
      alt: Data_Semigroup.append(semigroupList),
      Functor0: function () {
          return functorList;
      }
  };
  var plusList = {
      empty: Nil.value,
      Alt0: function () {
          return altList;
      }
  };
  var applicativeNonEmptyList = {
      pure: (function () {
          var $236 = Data_NonEmpty.singleton(plusList);
          return function ($237) {
              return NonEmptyList($236($237));
          };
      })(),
      Apply0: function () {
          return applyNonEmptyList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["plusList"] = plusList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  exports["reverse"] = reverse;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done1 = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $45 = Data_CatQueue["null"](v.value1);
              if ($45) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = {
      append: append
  };
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = {
      map: function (f) {
          return function (m) {
              if (m instanceof Left) {
                  return new Left(m.value0);
              };
              if (m instanceof Right) {
                  return new Right(f(m.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
          };
      }
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var resume$prime = function (k) {
      return function (j) {
          return function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return j(v.value0);
              };
              if (v instanceof Bind) {
                  return k(v.value0)(v.value1);
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [ v.constructor.name ]);
          };
      };
  };
  var resume = function (dictFunctor) {
      return resume$prime(function (g) {
          return function (i) {
              return new Data_Either.Left(Data_Functor.map(dictFunctor)(i)(g));
          };
      })(Data_Either.Right.create);
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var wrap = function (f) {
      return fromView(new Bind(f, Unsafe_Coerce.unsafeCoerce));
  };
  var freeMonad = {
      Applicative0: function () {
          return freeApplicative;
      },
      Bind1: function () {
          return freeBind;
      }
  };
  var freeFunctor = {
      map: function (k) {
          return function (f) {
              return Control_Bind.bindFlipped(freeBind)((function () {
                  var $119 = Control_Applicative.pure(freeApplicative);
                  return function ($120) {
                      return $119(k($120));
                  };
              })())(f);
          };
      }
  };
  var freeBind = {
      bind: function (v) {
          return function (k) {
              return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
          };
      },
      Apply0: function () {
          return freeApply;
      }
  };
  var freeApply = {
      apply: Control_Monad.ap(freeMonad),
      Functor0: function () {
          return freeFunctor;
      }
  };
  var freeApplicative = {
      pure: function ($121) {
          return fromView(Return.create($121));
      },
      Apply0: function () {
          return freeApply;
      }
  };
  var liftF = function (f) {
      return fromView(new Bind(f, (function () {
          var $122 = Control_Applicative.pure(freeApplicative);
          return function ($123) {
              return $122($123);
          };
      })()));
  };
  exports["wrap"] = wrap;
  exports["liftF"] = liftF;
  exports["resume"] = resume;
  exports["resume'"] = resume$prime;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.MultiAlternative"] = $PS["Control.MultiAlternative"] || {};
  var exports = $PS["Control.MultiAlternative"];         
  var orr = function (dict) {
      return dict.orr;
  };
  exports["orr"] = orr;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          var out;

          if (xs.length < 2) return xs;

          out = xs.slice(0);
          mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);

          return out;
        };
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Monad = $PS["Control.Monad"];
  var functorST = {
      map: $foreign.map_
  };
  var monadST = {
      Applicative0: function () {
          return applicativeST;
      },
      Bind1: function () {
          return bindST;
      }
  };
  var bindST = {
      bind: $foreign.bind_,
      Apply0: function () {
          return applyST;
      }
  };
  var applyST = {
      apply: Control_Monad.ap(monadST),
      Functor0: function () {
          return functorST;
      }
  };
  var applicativeST = {
      pure: $foreign.pure_,
      Apply0: function () {
          return applyST;
      }
  };
  exports["functorST"] = functorST;
  exports["applicativeST"] = applicativeST;
  exports["foreach"] = $foreign.foreach;
})(PS);
(function(exports) {
  "use strict";

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  exports.unsafeThaw = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }                         

  exports.thaw = copyImpl;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];                     
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var result = $foreign.thaw(xs)();
              f(result)();
              return $foreign.unsafeFreeze(result)();
          };
      };
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["withArray"] = withArray;
  exports["push"] = push;
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
  exports["unsafeThaw"] = $foreign.unsafeThaw;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = {
      eq: function (v) {
          return function (v1) {
              if (v instanceof LT && v1 instanceof LT) {
                  return true;
              };
              if (v instanceof GT && v1 instanceof GT) {
                  return true;
              };
              if (v instanceof EQ && v1 instanceof EQ) {
                  return true;
              };
              return false;
          };
      }
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var ordString = {
      compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var ordChar = {
      compare: $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqChar;
      }
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  exports["compare"] = compare;
  exports["comparing"] = comparing;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [ v.constructor.name ]);
      });
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var intercalate = function (dictMonoid) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(dictMonoid);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var nubBy = function (comp) {
      return function (xs) {
          var indexedAndSorted = sortBy(function (x) {
              return function (y) {
                  return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
              };
          })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
          var v = head(indexedAndSorted);
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)((function __do() {
                  var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();
                  Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v1) {
                      return function __do() {
                          var lst = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                              var $93 = (function () {
                                  var $95 = Data_Maybe.fromJust();
                                  return function ($96) {
                                      return $95(last($96));
                                  };
                              })();
                              return function ($94) {
                                  return Data_Tuple.snd($93($94));
                              };
                          })())(Data_Array_ST.unsafeFreeze(result))();
                          return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(lst)(v1.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v1)(result)))();
                      };
                  })();
                  return Data_Array_ST.unsafeFreeze(result)();
              })()));
          };
          throw new Error("Failed pattern match at Data.Array (line 1050, column 17 - line 1058, column 29): " + [ v.constructor.name ]);
      };
  };
  var nub = function (dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elem = function (dictEq) {
      return function (a) {
          return function (arr) {
              return Data_Maybe.isJust(elemIndex(dictEq)(a)(arr));
          };
      };
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $100 = Data_Maybe.maybe([  ])(singleton);
          return function ($101) {
              return $100(f($101));
          };
      })());
  };
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["elem"] = elem;
  exports["updateAt"] = updateAt;
  exports["mapMaybe"] = mapMaybe;
  exports["intercalate"] = intercalate;
  exports["nub"] = nub;
  exports["length"] = $foreign.length;
  exports["filter"] = $foreign.filter;
})(PS);
(function(exports) {
  "use strict";

  exports.foldr1Impl = function (f) {
    return function (xs) {
      var acc = xs[xs.length - 1];
      for (var i = xs.length - 2; i >= 0; i--) {
        acc = f(xs[i])(acc);
      }
      return acc;
    };
  };

  exports.foldl1Impl = function (f) {
    return function (xs) {
      var acc = xs[0];
      var len = xs.length;
      for (var i = 1; i < len; i++) {
        acc = f(acc)(xs[i]);
      }
      return acc;
    };
  };
})(PS["Data.Array.NonEmpty.Internal"] = PS["Data.Array.NonEmpty.Internal"] || {});
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  var functorWithIndexArray = {
      mapWithIndex: $foreign.mapWithIndexArray,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];              
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = {
      foldrWithIndex: function (f) {
          return function (z) {
              var $167 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
                  return function (y) {
                      return f(v.value0)(v.value1)(y);
                  };
              })(z);
              var $168 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
              return function ($169) {
                  return $167($168($169));
              };
          };
      },
      foldlWithIndex: function (f) {
          return function (z) {
              var $170 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
                  return function (v) {
                      return f(v.value0)(y)(v.value1);
                  };
              })(z);
              var $171 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
              return function ($172) {
                  return $170($171($172));
              };
          };
      },
      foldMapWithIndex: function (dictMonoid) {
          return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
      },
      Foldable0: function () {
          return Data_Foldable.foldableArray;
      }
  };
  exports["foldlWithIndex"] = foldlWithIndex;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Semigroup.Foldable"] = $PS["Data.Semigroup.Foldable"] || {};
  var exports = $PS["Data.Semigroup.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var foldl1 = function (dict) {
      return dict.foldl1;
  };
  var foldMap1DefaultL = function (dictFoldable1) {
      return function (dictFunctor) {
          return function (dictSemigroup) {
              return function (f) {
                  var $117 = foldl1(dictFoldable1)(Data_Semigroup.append(dictSemigroup));
                  var $118 = Data_Functor.map(dictFunctor)(f);
                  return function ($119) {
                      return $117($118($119));
                  };
              };
          };
      };
  };
  var foldMap1 = function (dict) {
      return dict.foldMap1;
  };
  exports["foldMap1"] = foldMap1;
  exports["foldMap1DefaultL"] = foldMap1DefaultL;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];
  var $foreign = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];  
  var NonEmptyArray = function (x) {
      return x;
  };                                                                              
  var functorNonEmptyArray = Data_Functor.functorArray;
  var foldableWithIndexNonEmptyArray = Data_FoldableWithIndex.foldableWithIndexArray;
  var foldableNonEmptyArray = Data_Foldable.foldableArray;
  var foldable1NonEmptyArray = {
      foldMap1: function (dictSemigroup) {
          return Data_Semigroup_Foldable.foldMap1DefaultL(foldable1NonEmptyArray)(functorNonEmptyArray)(dictSemigroup);
      },
      foldr1: $foreign.foldr1Impl,
      foldl1: $foreign.foldl1Impl,
      Foldable0: function () {
          return foldableNonEmptyArray;
      }
  };
  exports["NonEmptyArray"] = NonEmptyArray;
  exports["functorNonEmptyArray"] = functorNonEmptyArray;
  exports["foldableWithIndexNonEmptyArray"] = foldableWithIndexNonEmptyArray;
  exports["foldable1NonEmptyArray"] = foldable1NonEmptyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var unsafeFromArrayF = Unsafe_Coerce.unsafeCoerce;
  var unsafeFromArray = Data_Array_NonEmpty_Internal.NonEmptyArray;
  var toArray = function (v) {
      return v;
  };   
  var updateAt = function (i) {
      return function (x) {
          var $52 = Data_Array.updateAt(i)(x);
          return function ($53) {
              return unsafeFromArrayF($52(toArray($53)));
          };
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return unsafeFromArray(Data_Array.snoc(toArray(xs))(x));
      };
  };
  var singleton = function ($56) {
      return unsafeFromArray(Data_Array.singleton($56));
  };
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 159, column 1 - line 159, column 58): " + [ xs.constructor.name ]);
  };
  var cons$prime = function (x) {
      return function (xs) {
          return unsafeFromArray(Data_Array.cons(x)(xs));
      };
  };
  var adaptMaybe = function (f) {
      var $71 = Data_Maybe.fromJust();
      return function ($72) {
          return $71(f(toArray($72)));
      };
  };                                     
  var uncons = adaptMaybe(Data_Array.uncons);
  var adaptAny = function (f) {
      return function ($74) {
          return f(toArray($74));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  var unsafeAdapt = function (f) {
      var $75 = adaptAny(f);
      return function ($76) {
          return unsafeFromArray($75($76));
      };
  };
  var cons = function (x) {
      return unsafeAdapt(Data_Array.cons(x));
  };
  exports["fromArray"] = fromArray;
  exports["singleton"] = singleton;
  exports["cons'"] = cons$prime;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["updateAt"] = updateAt;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  var semigroupEffect = function (dictSemigroup) {
      return {
          append: Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup))
      };
  };
  var monoidEffect = function (dictMonoid) {
      return {
          mempty: $foreign.pureE(Data_Monoid.mempty(dictMonoid)),
          Semigroup0: function () {
              return semigroupEffect(dictMonoid.Semigroup0());
          }
      };
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["monadEffect"] = monadEffect;
  exports["monoidEffect"] = monoidEffect;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports._parAffAlt = function (aff1) {
    return function (aff2) {
      return Aff.ParAlt(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };  

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                        
  var throwError = function (dict) {
      return dict.throwError;
  };
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $21 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($22) {
                  return $21(Data_Either.Left.create($22));
              };
          })());
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["try"] = $$try;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];                      
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["parSequence_"] = parSequence_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var monadEffectEffect = {
      liftEffect: Control_Category.identity(Control_Category.categoryFn),
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var $$try = function (action) {
      return $foreign.catchException((function () {
          var $0 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($1) {
              return $0(Data_Either.Left.create($1));
          };
      })())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
  };                                                                               
  var showError = {
      show: $foreign.showErrorImpl
  };
  exports["try"] = $$try;
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function () {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function () {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Canceler = function (x) {
      return x;
  };
  var functorParAff = {
      map: $foreign["_parAffMap"]
  };
  var functorAff = {
      map: $foreign["_map"]
  };                                    
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var applyParAff = {
      apply: $foreign["_parAffApply"],
      Functor0: function () {
          return functorParAff;
      }
  };
  var monadAff = {
      Applicative0: function () {
          return applicativeAff;
      },
      Bind1: function () {
          return bindAff;
      }
  };
  var bindAff = {
      bind: $foreign["_bind"],
      Apply0: function () {
          return applyAff;
      }
  };
  var applyAff = {
      apply: Control_Monad.ap(monadAff),
      Functor0: function () {
          return functorAff;
      }
  };
  var applicativeAff = {
      pure: $foreign["_pure"],
      Apply0: function () {
          return applyAff;
      }
  };
  var monadEffectAff = {
      liftEffect: $foreign["_liftEffect"],
      Monad0: function () {
          return monadAff;
      }
  };
  var effectCanceler = (function () {
      var $42 = Effect_Class.liftEffect(monadEffectAff);
      return function ($43) {
          return Canceler(Data_Function["const"]($42($43)));
      };
  })();
  var monadThrowAff = {
      throwError: $foreign["_throwError"],
      Monad0: function () {
          return monadAff;
      }
  };
  var monadErrorAff = {
      catchError: $foreign["_catchError"],
      MonadThrow0: function () {
          return monadThrowAff;
      }
  };                                                            
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $46 = Effect_Class.liftEffect(monadEffectAff);
              return function ($47) {
                  return $46(k($47));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var parallelAff = {
      parallel: Unsafe_Coerce.unsafeCoerce,
      sequential: $foreign["_sequential"],
      Monad0: function () {
          return monadAff;
      },
      Applicative1: function () {
          return applicativeParAff;
      }
  };
  var applicativeParAff = {
      pure: (function () {
          var $50 = Control_Parallel_Class.parallel(parallelAff);
          var $51 = Control_Applicative.pure(applicativeAff);
          return function ($52) {
              return $50($51($52));
          };
      })(),
      Apply0: function () {
          return applyParAff;
      }
  };
  var semigroupCanceler = {
      append: function (v) {
          return function (v1) {
              return function (err) {
                  return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
              };
          };
      }
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  var monoidCanceler = {
      mempty: nonCanceler,
      Semigroup0: function () {
          return semigroupCanceler;
      }
  };
  var never = $foreign.makeAff(function (v) {
      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(monoidCanceler));
  });  
  var altParAff = {
      alt: $foreign["_parAffAlt"],
      Functor0: function () {
          return functorParAff;
      }
  };
  var altAff = {
      alt: function (a1) {
          return function (a2) {
              return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
          };
      },
      Functor0: function () {
          return functorAff;
      }
  };
  var plusAff = {
      empty: Control_Monad_Error_Class.throwError(monadThrowAff)(Effect_Exception.error("Always fails")),
      Alt0: function () {
          return altAff;
      }
  };
  var plusParAff = {
      empty: Control_Parallel_Class.parallel(parallelAff)(Control_Plus.empty(plusAff)),
      Alt0: function () {
          return altParAff;
      }
  };
  exports["runAff_"] = runAff_;
  exports["never"] = never;
  exports["effectCanceler"] = effectCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["altParAff"] = altParAff;
  exports["plusParAff"] = plusParAff;
  exports["parallelAff"] = parallelAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Concur.Core.Types"] = $PS["Concur.Core.Types"] || {};
  var exports = $PS["Concur.Core.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_MultiAlternative = $PS["Control.MultiAlternative"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Either = $PS["Data.Either"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];                            
  var WidgetStep = function (x) {
      return x;
  };
  var Widget = function (x) {
      return x;
  };
  var widgetShiftMap = {
      shiftMap: function (f) {
          return f(Control_Category.identity(Control_Category.categoryFn));
      }
  };                                                   
  var widgetFunctor = Control_Monad_Free.freeFunctor;
  var widgetBind = Control_Monad_Free.freeBind;  
  var widgetApplicative = Control_Monad_Free.freeApplicative;
  var widgetMonad = {
      Applicative0: function () {
          return widgetApplicative;
      },
      Bind1: function () {
          return widgetBind;
      }
  };
  var unWidget = function (v) {
      return v;
  };
  var resume = function (dictFunctor) {
      return Control_Monad_Free["resume'"](function (g) {
          return function (i) {
              return new Data_Either.Right(Data_Functor.map(dictFunctor)(i)(g));
          };
      })(Data_Either.Left.create);
  };
  var functorWidgetStep = {
      map: function (f) {
          return function (v) {
              var mod = function (v1) {
                  if (v1 instanceof Data_Either.Right) {
                      return new Data_Either.Right({
                          cont: Data_Functor.map(Effect_Aff.functorAff)(f)(v1.value0.cont),
                          view: v1.value0.view
                      });
                  };
                  if (v1 instanceof Data_Either.Left) {
                      return new Data_Either.Left(Data_Functor.map(Effect.functorEffect)(f)(v1.value0));
                  };
                  throw new Error("Failed pattern match at Concur.Core.Types (line 45, column 5 - line 45, column 57): " + [ v1.constructor.name ]);
              };
              return mod(v);
          };
      }
  };
  var effAction = function ($82) {
      return Widget(Control_Monad_Free.liftF(WidgetStep(Data_Either.Left.create($82))));
  };
  var widgetMonadEff = function (dictMonoid) {
      return {
          liftEffect: effAction,
          Monad0: function () {
              return widgetMonad;
          }
      };
  };
  var displayStep = function (v) {
      return new Data_Either.Right({
          view: v,
          cont: Effect_Aff.never
      });
  };
  var display = function (v) {
      return Control_Monad_Free.liftF(displayStep(v));
  };
  var widgetSemigroup = function (dictMonoid) {
      return {
          append: function (w1) {
              return function (w2) {
                  return Control_MultiAlternative.orr(widgetMultiAlternative(dictMonoid))([ w1, w2 ]);
              };
          }
      };
  };
  var widgetPlus = function (dictMonoid) {
      return {
          empty: display(Data_Monoid.mempty(dictMonoid)),
          Alt0: function () {
              return widgetAlt(dictMonoid);
          }
      };
  };
  var widgetMultiAlternative = function (dictMonoid) {
      return {
          orr: function (wss) {
              var merge = function (dictMonoid1) {
                  return function (ws) {
                      return function (wscs) {
                          var wsm = Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(function ($83) {
                              return Control_Monad_Free.wrap(WidgetStep(Data_Either.Right.create($83)));
                          })(ws);
                          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Data_FoldableWithIndex.foldlWithIndex(Data_Array_NonEmpty_Internal.foldableWithIndexNonEmptyArray)(function (i) {
                              return function (r) {
                                  return function (w) {
                                      return Control_Alt.alt(Effect_Aff.altParAff)(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Tuple.Tuple.create(i))(w)))(r);
                                  };
                              };
                          })(Control_Plus.empty(Effect_Aff.plusParAff))(wscs)))(function (v) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(combine(dictMonoid1)(Data_Maybe.fromMaybe(wsm)(Data_Array_NonEmpty.updateAt(v.value0)(v.value1)(wsm))));
                          });
                      };
                  };
              };
              var combineViewsConts = function (dictMonoid1) {
                  return function (ws) {
                      return Control_Monad_Free.wrap(new Data_Either.Right({
                          view: Data_Semigroup_Foldable.foldMap1(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)(dictMonoid1.Semigroup0())(function (v) {
                              return v.view;
                          })(ws),
                          cont: merge(dictMonoid1)(ws)(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(function (v) {
                              return v.cont;
                          })(ws))
                      }));
                  };
              };
              var combineInner1 = function (dictMonoid1) {
                  return function (ws) {
                      return function (freeNarr) {
                          var x = Data_Array_NonEmpty.uncons(freeNarr);
                          var v = resume(functorWidgetStep)(x.head);
                          if (v instanceof Data_Either.Left) {
                              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v.value0);
                          };
                          if (v instanceof Data_Either.Right) {
                              if (v.value0 instanceof Data_Either.Left) {
                                  return Control_Monad_Free.wrap(new Data_Either.Left(function __do() {
                                      var w = v.value0.value0();
                                      return combineInner1(dictMonoid1)(ws)(Data_Array_NonEmpty["cons'"](w)(x.tail));
                                  }));
                              };
                              if (v.value0 instanceof Data_Either.Right) {
                                  return combineInner(dictMonoid1)(Data_Array_NonEmpty.snoc(ws)(v.value0.value0))(x.tail);
                              };
                              throw new Error("Failed pattern match at Concur.Core.Types (line 138, column 34 - line 142, column 61): " + [ v.value0.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Concur.Core.Types (line 136, column 10 - line 142, column 61): " + [ v.constructor.name ]);
                      };
                  };
              };
              var combineInner = function (dictMonoid1) {
                  return function (ws) {
                      return function (freeArr) {
                          var v = Data_Array_NonEmpty.fromArray(freeArr);
                          if (v instanceof Data_Maybe.Nothing) {
                              return combineViewsConts(dictMonoid1)(ws);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              return combineInner1(dictMonoid1)(ws)(v.value0);
                          };
                          throw new Error("Failed pattern match at Concur.Core.Types (line 113, column 31 - line 116, column 49): " + [ v.constructor.name ]);
                      };
                  };
              };
              var combine = function (dictMonoid1) {
                  return function (wfs) {
                      var x = Data_Array_NonEmpty.uncons(wfs);
                      var v = resume(functorWidgetStep)(x.head);
                      if (v instanceof Data_Either.Left) {
                          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v.value0);
                      };
                      if (v instanceof Data_Either.Right) {
                          if (v.value0 instanceof Data_Either.Left) {
                              return Control_Monad_Free.wrap(new Data_Either.Left(function __do() {
                                  var w = v.value0.value0();
                                  return combine(dictMonoid1)(Data_Array_NonEmpty["cons'"](w)(x.tail));
                              }));
                          };
                          if (v.value0 instanceof Data_Either.Right) {
                              return combineInner(dictMonoid1)(Data_Array_NonEmpty.singleton(v.value0.value0))(x.tail);
                          };
                          throw new Error("Failed pattern match at Concur.Core.Types (line 101, column 34 - line 105, column 63): " + [ v.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Concur.Core.Types (line 99, column 10 - line 105, column 63): " + [ v.constructor.name ]);
                  };
              };
              var v = Data_Array_NonEmpty.fromArray(wss);
              if (v instanceof Data_Maybe.Just) {
                  return combine(dictMonoid)(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(unWidget)(v.value0));
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Plus.empty(widgetPlus(dictMonoid));
              };
              throw new Error("Failed pattern match at Concur.Core.Types (line 88, column 13 - line 90, column 21): " + [ v.constructor.name ]);
          },
          Plus0: function () {
              return widgetPlus(dictMonoid);
          }
      };
  };
  var widgetAlt = function (dictMonoid) {
      return {
          alt: Data_Semigroup.append(widgetSemigroup(dictMonoid)),
          Functor0: function () {
              return widgetFunctor;
          }
      };
  };
  exports["Widget"] = Widget;
  exports["unWidget"] = unWidget;
  exports["resume"] = resume;
  exports["display"] = display;
  exports["functorWidgetStep"] = functorWidgetStep;
  exports["widgetFunctor"] = widgetFunctor;
  exports["widgetBind"] = widgetBind;
  exports["widgetShiftMap"] = widgetShiftMap;
  exports["widgetMultiAlternative"] = widgetMultiAlternative;
  exports["widgetMonadEff"] = widgetMonadEff;
})(PS);
(function(exports) {
  "use strict";

  var AVar = function () {

    function MutableQueue () {
      this.head = null;
      this.last = null;
      this.size = 0;
    }

    function MutableCell (queue, value) {
      this.queue = queue;
      this.value = value;
      this.next  = null;
      this.prev  = null;
    }

    function AVar (value) {
      this.draining = false;
      this.error    = null;
      this.value    = value;
      this.takes    = new MutableQueue();
      this.reads    = new MutableQueue();
      this.puts     = new MutableQueue();
    }

    var EMPTY = {};

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function putLast (queue, value) {
      var cell = new MutableCell(queue, value);
      switch (queue.size) {
        case 0:
          queue.head = cell;
          break;
        case 1:
          cell.prev = queue.head;
          queue.head.next = cell;
          queue.last = cell;
          break;
        default:
          cell.prev = queue.last;
          queue.last.next = cell;
          queue.last = cell;
      }
      queue.size++;
      return cell;
    }

    function takeLast (queue) {
      var cell;
      switch (queue.size) {
        case 0:
          return null;
        case 1:
          cell = queue.head;
          queue.head = null;
          break;
        case 2:
          cell = queue.last;
          queue.head.next = null;
          queue.last = null;
          break;
        default:
          cell = queue.last;
          queue.last = cell.prev;
          queue.last.next = null;
      }
      cell.prev = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function takeHead (queue) {
      var cell;
      switch (queue.size) {
        case 0:
          return null;
        case 1:
          cell = queue.head;
          queue.head = null;
          break;
        case 2:
          cell = queue.head;
          queue.last.prev = null;
          queue.head = queue.last;
          queue.last = null;
          break;
        default:
          cell = queue.head;
          queue.head = cell.next;
          queue.head.prev = null;
      }
      cell.next = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function deleteCell (cell) {
      if (cell.queue === null) {
        return;
      }
      if (cell.queue.last === cell) {
        takeLast(cell.queue);
        return;
      }
      if (cell.queue.head === cell) {
        takeHead(cell.queue);
        return;
      }
      if (cell.prev) {
        cell.prev.next = cell.next;
      }
      if (cell.next) {
        cell.next.prev = cell.prev;
      }
      cell.queue.size--;
      cell.queue = null;
      cell.value = null;
      cell.next  = null;
      cell.prev  = null;
    }

    function drainVar (util, avar) {
      if (avar.draining) {
        return;
      }

      var ps = avar.puts;
      var ts = avar.takes;
      var rs = avar.reads;
      var p, r, t, value, rsize;

      avar.draining = true;

      while (1) { // eslint-disable-line no-constant-condition
        p = null;
        r = null;
        t = null;
        value = avar.value;
        rsize = rs.size;

        if (avar.error !== null) {
          value = util.left(avar.error);
          while (p = takeHead(ps)) { // eslint-disable-line no-cond-assign
            runEff(p.cb(value));
          }
          while (r = takeHead(rs)) { // eslint-disable-line no-cond-assign
            runEff(r(value));
          }
          while (t = takeHead(ts)) { // eslint-disable-line no-cond-assign
            runEff(t(value));
          }
          break;
        }

        // Process the next put. We do not immediately invoke the callback
        // because we want to preserve ordering. If there are takes/reads
        // we want to run those first.
        if (value === EMPTY && (p = takeHead(ps))) {
          avar.value = value = p.value;
        }

        if (value !== EMPTY) {
          // We go ahead and queue up the next take for the same reasons as
          // above. Invoking the read callbacks can affect the mutable queue.
          t = takeHead(ts);
          // We only want to process the reads queued up before running these
          // callbacks so we guard on rsize.
          while (rsize-- && (r = takeHead(rs))) {
            runEff(r(util.right(value)));
          }
          if (t !== null) {
            avar.value = EMPTY;
            runEff(t(util.right(value)));
          }
        }

        if (p !== null) {
          runEff(p.cb(util.right(void 0)));
        }

        // Callbacks could have queued up more items so we need to guard on the
        // actual mutable properties.
        if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
          break;
        }
      }
      avar.draining = false;
    }

    AVar.EMPTY      = EMPTY;
    AVar.putLast    = putLast;
    AVar.takeLast   = takeLast;
    AVar.takeHead   = takeHead;
    AVar.deleteCell = deleteCell;
    AVar.drainVar   = drainVar;

    return AVar;
  }();

  exports.empty = function () {
    return new AVar(AVar.EMPTY);
  };

  exports._takeVar = function (util, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.takes, cb);
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };

  exports._tryPutVar = function (util, value, avar) {
    return function () {
      if (avar.value === AVar.EMPTY && avar.error === null) {
        avar.value = value;
        AVar.drainVar(util, avar);
        return true;
      } else {
        return false;
      }
    };
  };
})(PS["Effect.AVar"] = PS["Effect.AVar"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.AVar"] = $PS["Effect.AVar"] || {};
  var exports = $PS["Effect.AVar"];
  var $foreign = $PS["Effect.AVar"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Killed = (function () {
      function Killed(value0) {
          this.value0 = value0;
      };
      Killed.create = function (value0) {
          return new Killed(value0);
      };
      return Killed;
  })();
  var Filled = (function () {
      function Filled(value0) {
          this.value0 = value0;
      };
      Filled.create = function (value0) {
          return new Filled(value0);
      };
      return Filled;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var ffiUtil = {
      left: Data_Either.Left.create,
      right: Data_Either.Right.create,
      nothing: Data_Maybe.Nothing.value,
      just: Data_Maybe.Just.create,
      killed: Killed.create,
      filled: Filled.create,
      empty: Empty.value
  };
  var take = function (avar) {
      return function (cb) {
          return $foreign["_takeVar"](ffiUtil, avar, cb);
      };
  };
  var tryPut = function (value) {
      return function (avar) {
          return $foreign["_tryPutVar"](ffiUtil, value, avar);
      };
  };
  exports["take"] = take;
  exports["tryPut"] = tryPut;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Aff.AVar"] = $PS["Effect.Aff.AVar"] || {};
  var exports = $PS["Effect.Aff.AVar"];
  var Effect_AVar = $PS["Effect.AVar"];
  var Effect_Aff = $PS["Effect.Aff"];
  var take = function (avar) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var c = Effect_AVar.take(avar)(k)();
              return Effect_Aff.effectCanceler(c);
          };
      });
  };
  exports["take"] = take;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Aff.Class"] = $PS["Effect.Aff.Class"] || {};
  var exports = $PS["Effect.Aff.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var monadAffAff = {
      liftAff: Control_Category.identity(Control_Category.categoryFn),
      MonadEffect0: function () {
          return Effect_Aff.monadEffectAff;
      }
  };
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  exports["liftAff"] = liftAff;
  exports["monadAffAff"] = monadAffAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Concur.Core"] = $PS["Concur.Core"] || {};
  var exports = $PS["Concur.Core"];
  var Concur_Core_Types = $PS["Concur.Core.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_AVar = $PS["Effect.AVar"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_AVar = $PS["Effect.Aff.AVar"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];                
  var mkNodeWidget$prime = function (mkView) {
      return function (w) {
          var v = Concur_Core_Types.resume(Concur_Core_Types.functorWidgetStep)(w);
          if (v instanceof Data_Either.Left) {
              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v.value0);
          };
          if (v instanceof Data_Either.Right) {
              if (v.value0 instanceof Data_Either.Left) {
                  return Control_Monad_Free.wrap(new Data_Either.Left(function __do() {
                      var w$prime = v.value0.value0();
                      return mkNodeWidget$prime(mkView)(w$prime);
                  }));
              };
              if (v.value0 instanceof Data_Either.Right) {
                  return Control_Monad_Free.wrap(new Data_Either.Left(function __do() {
                      var $$var = Effect_AVar.empty();
                      var eventHandler = function (a) {
                          return Data_Functor["void"](Effect.functorEffect)(Effect_AVar.tryPut(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(a))($$var));
                      };
                      var cont$prime = Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Alt.alt(Effect_Aff.altParAff)(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Effect_Aff_Class.liftAff(Effect_Aff_Class.monadAffAff)(Effect_Aff_AVar.take($$var))))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Data_Functor.map(Effect_Aff.functorAff)(mkNodeWidget$prime(mkView))(v.value0.value0.cont))));
                      return Control_Monad_Free.wrap(new Data_Either.Right({
                          view: mkView(eventHandler)(v.value0.value0.view),
                          cont: cont$prime
                      }));
                  }));
              };
              throw new Error("Failed pattern match at Concur.Core (line 36, column 28 - line 49, column 10): " + [ v.value0.constructor.name ]);
          };
          throw new Error("Failed pattern match at Concur.Core (line 34, column 26 - line 49, column 10): " + [ v.constructor.name ]);
      };
  };
  var mkNodeWidget = function (mkView) {
      return function (v) {
          return mkNodeWidget$prime(mkView)(v);
      };
  };
  exports["mkNodeWidget"] = mkNodeWidget;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Concur.Core.Props"] = $PS["Concur.Core.Props"] || {};
  var exports = $PS["Concur.Core.Props"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];                
  var PrimProp = (function () {
      function PrimProp(value0) {
          this.value0 = value0;
      };
      PrimProp.create = function (value0) {
          return new PrimProp(value0);
      };
      return PrimProp;
  })();
  var Handler = (function () {
      function Handler(value0) {
          this.value0 = value0;
      };
      Handler.create = function (value0) {
          return new Handler(value0);
      };
      return Handler;
  })();
  var mkProp = function (v) {
      return function (v1) {
          if (v1 instanceof PrimProp) {
              return v1.value0;
          };
          if (v1 instanceof Handler) {
              return v1.value0(v);
          };
          throw new Error("Failed pattern match at Concur.Core.Props (line 18, column 1 - line 22, column 7): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var functorProps = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof PrimProp) {
                  return new PrimProp(v1.value0);
              };
              if (v1 instanceof Handler) {
                  return new Handler(function (k) {
                      return v1.value0(function ($25) {
                          return k(v($25));
                      });
                  });
              };
              throw new Error("Failed pattern match at Concur.Core.Props (line 13, column 1 - line 15, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      }
  };
  var filterProp = function (v) {
      return function (v1) {
          if (v1 instanceof PrimProp) {
              return v1;
          };
          if (v1 instanceof Handler) {
              return new Handler(function (h) {
                  return v1.value0(function (a) {
                      var $23 = v(a);
                      if ($23) {
                          return h(a);
                      };
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  });
              });
          };
          throw new Error("Failed pattern match at Concur.Core.Props (line 37, column 1 - line 41, column 12): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  exports["PrimProp"] = PrimProp;
  exports["Handler"] = Handler;
  exports["mkProp"] = mkProp;
  exports["filterProp"] = filterProp;
  exports["functorProps"] = functorProps;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.ShiftMap"] = $PS["Control.ShiftMap"] || {};
  var exports = $PS["Control.ShiftMap"];
  var shiftMap = function (dict) {
      return dict.shiftMap;
  };
  exports["shiftMap"] = shiftMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Concur.Core.DOM"] = $PS["Concur.Core.DOM"] || {};
  var exports = $PS["Concur.Core.DOM"];
  var Concur_Core = $PS["Concur.Core"];
  var Concur_Core_Props = $PS["Concur.Core.Props"];
  var Control_MultiAlternative = $PS["Control.MultiAlternative"];
  var Control_ShiftMap = $PS["Control.ShiftMap"];
  var Data_Functor = $PS["Data.Functor"];
  var el = function (dictShiftMap) {
      return function (dictFunctor) {
          return function (e) {
              return function (props) {
                  return Control_ShiftMap.shiftMap(dictShiftMap)(function (f) {
                      return function (w) {
                          return Concur_Core.mkNodeWidget(function (h) {
                              return function (v) {
                                  return e(Data_Functor.map(dictFunctor)((function () {
                                      var $7 = Concur_Core_Props.mkProp(h);
                                      var $8 = Data_Functor.map(Concur_Core_Props.functorProps)(f);
                                      return function ($9) {
                                          return $7($8($9));
                                      };
                                  })())(props))(v);
                              };
                          })(w);
                      };
                  });
              };
          };
      };
  };
  var el$prime = function (dictShiftMap) {
      return function (dictMultiAlternative) {
          return function (dictFunctor) {
              return function (e) {
                  return function (props) {
                      var $10 = el(dictShiftMap)(dictFunctor)(e)(props);
                      var $11 = Control_MultiAlternative.orr(dictMultiAlternative);
                      return function ($12) {
                          return $10($11($12));
                      };
                  };
              };
          };
      };
  };
  exports["el'"] = el$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Concur.Core.Discharge"] = $PS["Concur.Core.Discharge"] || {};
  var exports = $PS["Concur.Core.Discharge"];
  var Concur_Core_Types = $PS["Concur.Core.Types"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var dischargePartialEffect = function (dictMonoid) {
      return function (w) {
          var v = Control_Monad_Free.resume(Concur_Core_Types.functorWidgetStep)(Concur_Core_Types.unWidget(w));
          if (v instanceof Data_Either.Right) {
              return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Tuple.Tuple(w, Data_Monoid.mempty(dictMonoid)));
          };
          if (v instanceof Data_Either.Left) {
              if (v.value0 instanceof Data_Either.Left) {
                  return function __do() {
                      var w$prime = v.value0.value0();
                      return dischargePartialEffect(dictMonoid)(w$prime)();
                  };
              };
              if (v.value0 instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Tuple.Tuple(Control_Monad_Free.wrap(new Data_Either.Right(v.value0.value0)), v.value0.value0.view));
              };
              throw new Error("Failed pattern match at Concur.Core.Discharge (line 43, column 27 - line 47, column 77): " + [ v.value0.constructor.name ]);
          };
          throw new Error("Failed pattern match at Concur.Core.Discharge (line 41, column 28 - line 47, column 77): " + [ v.constructor.name ]);
      };
  };
  var discharge = function (dictMonoid) {
      return function (handler) {
          return function (v) {
              var v1 = Control_Monad_Free.resume(Concur_Core_Types.functorWidgetStep)(v);
              if (v1 instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(dictMonoid));
              };
              if (v1 instanceof Data_Either.Left) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return function __do() {
                          var w$prime = v1.value0.value0();
                          return discharge(dictMonoid)(handler)(w$prime)();
                      };
                  };
                  if (v1.value0 instanceof Data_Either.Right) {
                      return function __do() {
                          Effect_Aff.runAff_((function () {
                              var $19 = Data_Functor.map(Data_Either.functorEither)(Concur_Core_Types.Widget);
                              return function ($20) {
                                  return handler($19($20));
                              };
                          })())(v1.value0.value0.cont)();
                          return v1.value0.value0.view;
                      };
                  };
                  throw new Error("Failed pattern match at Concur.Core.Discharge (line 26, column 28 - line 32, column 19): " + [ v1.value0.constructor.name ]);
              };
              throw new Error("Failed pattern match at Concur.Core.Discharge (line 24, column 32 - line 32, column 19): " + [ v1.constructor.name ]);
          };
      };
  };
  exports["discharge"] = discharge;
  exports["dischargePartialEffect"] = dischargePartialEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Concur.Core.LiftWidget"] = $PS["Concur.Core.LiftWidget"] || {};
  var exports = $PS["Concur.Core.LiftWidget"];
  var Control_Category = $PS["Control.Category"];                                    
  var widgetLiftWidget = {
      liftWidget: Control_Category.identity(Control_Category.categoryFn)
  };
  var liftWidget = function (dict) {
      return dict.liftWidget;
  };
  exports["liftWidget"] = liftWidget;
  exports["widgetLiftWidget"] = widgetLiftWidget;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  var Data_Show = $PS["Data.Show"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
  exports["log"] = $foreign.log;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";
  var React =require("react"); 

  function createClass(baseClass) {
    function bindProperty(instance, prop, value) {
      switch (prop) {
        case 'state':
        case 'render':
        case 'componentDidMount':
        case 'componentWillUnmount':
          instance[prop] = value;
          break;

        case 'componentDidCatch':
        case 'componentWillUpdate':
        case 'shouldComponentUpdate':
        case 'getSnapshotBeforeUpdate':
          instance[prop] = function (a, b) { return value(a)(b)(); };
          break;

        case 'componentDidUpdate':
          instance[prop] = function (a, b, c) { return value(a)(b)(c)(); };
          break;

        case 'unsafeComponentWillMount':
          instance['UNSAFE_componentWillMount'] = value;
          break;

        case 'unsafeComponentWillReceiveProps':
          instance['UNSAFE_componentWillReceiveProps'] = function (a) { return value(a)(); };
          break;

        case 'unsafeComponentWillUpdate':
          instance['UNSAFE_componentWillUpdate'] = function (a, b) { return value(a)(b)(); };
          break;

        default:
          throw new Error('[purescript-react] Not a component property: ' + prop);
      }
    }

    return function (displayName) {
      return function (ctrFn) {
        var Constructor = function (props) {
          baseClass.call(this, props);
          var spec = ctrFn(this)();
          for (var k in spec) {
            bindProperty(this, k, spec[k]);
          }
        };

        Constructor.displayName = displayName;
        Constructor.prototype = Object.create(baseClass.prototype);
        Constructor.prototype.constructor = Constructor;

        return Constructor;
      };
    };
  }

  var componentImpl = createClass(React.Component);
  exports.componentImpl = componentImpl;                 

  exports.fragment = React.Fragment;           

  function setStateImpl(this_) {
    return function(state){
      return function(){
        this_.setState(state);
      };
    };
  }
  exports.setStateImpl = setStateImpl;                        

  function getState(this_) {
    return function(){
      if (!this_.state) {
        throw new Error('[purescript-react] Cannot get state within constructor');
      }
      return this_.state;
    };
  }
  exports.getState = getState;                              

  function createElement(class_) {
    return function(props){
      return function(children){
        return React.createElement.apply(React, [class_, props].concat(children));
      };
    };
  }
  exports.createElementImpl = createElement;
  exports.createElementTagName = createElement;

  function createLeafElement(class_) {
    return function(props) {
      return React.createElement(class_, props);
    };
  }
  exports.createLeafElementImpl = createLeafElement;

  function createElementDynamic(class_) {
    return function(props) {
      return function(children){
        return React.createElement(class_, props, children);
      };
    };
  };                                                      
  exports.createElementTagNameDynamic = createElementDynamic;
})(PS["React"] = PS["React"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["React"] = $PS["React"] || {};
  var exports = $PS["React"];
  var $foreign = $PS["React"];                                   
  var writeState = $foreign.setStateImpl;                            
  var unsafeCreateElement = $foreign.createElementImpl;
  var toElement = function (dict) {
      return dict.toElement;
  };
  var createLeafElement = function () {
      return $foreign.createLeafElementImpl;
  };
  var createElement = function () {
      return $foreign.createElementImpl;
  };   
  var isReactElementArray = {
      toElement: createElement()($foreign.fragment)({})
  };
  var component = function () {
      return $foreign.componentImpl;
  };
  exports["component"] = component;
  exports["writeState"] = writeState;
  exports["unsafeCreateElement"] = unsafeCreateElement;
  exports["createLeafElement"] = createLeafElement;
  exports["toElement"] = toElement;
  exports["isReactElementArray"] = isReactElementArray;
  exports["getState"] = $foreign.getState;
  exports["createElementTagName"] = $foreign.createElementTagName;
  exports["createElementTagNameDynamic"] = $foreign.createElementTagNameDynamic;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Concur.React"] = $PS["Concur.React"] || {};
  var exports = $PS["Concur.React"];
  var Concur_Core_Discharge = $PS["Concur.Core.Discharge"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var React = $PS["React"];                
  var mkComponentState = function (v) {
      return {
          view: v
      };
  };
  var componentClassWithMount = function (onMount) {
      return function (winit) {
          var render = function (st) {
              return React.toElement(React.isReactElementArray)(st.view);
          };
          var handler = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Either.Right) {
                      return function __do() {
                          var v2 = Concur_Core_Discharge.discharge(Data_Monoid.monoidArray)(handler(v))(v1.value0)();
                          return Data_Functor["void"](Effect.functorEffect)(React.writeState(v)(mkComponentState(v2)))();
                      };
                  };
                  if (v1 instanceof Data_Either.Left) {
                      return function __do() {
                          Effect_Console.log("FAILED! " + Data_Show.show(Effect_Exception.showError)(v1.value0))();
                          return Data_Unit.unit;
                      };
                  };
                  throw new Error("Failed pattern match at Concur.React (line 32, column 5 - line 34, column 52): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          var component = function ($$this) {
              return function __do() {
                  var v = Concur_Core_Discharge.dischargePartialEffect(Data_Monoid.monoidArray)(winit)();
                  return {
                      state: mkComponentState(v.value1),
                      render: Data_Functor.map(Effect.functorEffect)(render)(React.getState($$this)),
                      componentDidMount: Control_Apply.applySecond(Effect.applyEffect)(onMount)(handler($$this)(new Data_Either.Right(v.value0)))
                  };
              };
          };
          return React.component()("Concur")(component);
      };
  };
  var componentClass = componentClassWithMount(Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit)));
  var renderComponent = function (init) {
      return React.createLeafElement()(componentClass(init))({});
  };
  exports["renderComponent"] = renderComponent;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";
  var React =require("react"); 

  function unsafeMkProps(key) {
    return function(value){
      var result = {};
      result[key] = value;
      return result;
    };
  }
  exports.unsafeMkProps = unsafeMkProps;

  function unsafeUnfoldProps(key) {
    return function(value){
      var result = {};
      var props = {};
      props[key] = result;

      for (var subprop in value) {
        if (value.hasOwnProperty(subprop)) {
          result[subprop] = value[subprop];
        }
      }

      return props;
    };
  }
  exports.unsafeUnfoldProps = unsafeUnfoldProps;

  function unsafeFromPropsArray(props) {
    var result = {};

    for (var i = 0, len = props.length; i < len; i++) {
      var prop = props[i];

      for (var key in prop) {
        if (prop.hasOwnProperty(key)) {
          result[key] = prop[key];
        }
      }
    }

    return result;
  };
  exports.unsafeFromPropsArray = unsafeFromPropsArray;
})(PS["React.DOM.Props"] = PS["React.DOM.Props"] || {});
(function(exports) {
  "use strict";

  exports.mkEffectFn1 = function mkEffectFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.runEffectFn1 = function runEffectFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["mkEffectFn1"] = $foreign.mkEffectFn1;
  exports["runEffectFn1"] = $foreign.runEffectFn1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["React.DOM.Props"] = $PS["React.DOM.Props"] || {};
  var exports = $PS["React.DOM.Props"];
  var $foreign = $PS["React.DOM.Props"];
  var Effect_Uncurried = $PS["Effect.Uncurried"]; 
  var valueArray = $foreign.unsafeMkProps("value");
  var value = $foreign.unsafeMkProps("value");
  var target = $foreign.unsafeMkProps("target");  
  var style = $foreign.unsafeUnfoldProps("style");
  var placeholder = $foreign.unsafeMkProps("placeholder");
  var open = $foreign.unsafeMkProps("open");
  var onKeyDown = function (f) {
      return $foreign.unsafeMkProps("onKeyDown")(Effect_Uncurried.mkEffectFn1(f));
  };
  var onClick = function (f) {
      return $foreign.unsafeMkProps("onClick")(Effect_Uncurried.mkEffectFn1(f));
  };
  var onChange = function (f) {
      return $foreign.unsafeMkProps("onChange")(Effect_Uncurried.mkEffectFn1(f));
  };                                          
  var multiple = $foreign.unsafeMkProps("multiple");
  var label = $foreign.unsafeMkProps("label");        
  var key = $foreign.unsafeMkProps("key");            
  var htmlFor = $foreign.unsafeMkProps("htmlFor");  
  var href = $foreign.unsafeMkProps("href");        
  var disabled = $foreign.unsafeMkProps("disabled");
  var color = $foreign.unsafeMkProps("color");    
  var className = $foreign.unsafeMkProps("className");
  var checked = $foreign.unsafeMkProps("checked");
  exports["style"] = style;
  exports["checked"] = checked;
  exports["className"] = className;
  exports["disabled"] = disabled;
  exports["href"] = href;
  exports["htmlFor"] = htmlFor;
  exports["key"] = key;
  exports["label"] = label;
  exports["multiple"] = multiple;
  exports["open"] = open;
  exports["placeholder"] = placeholder;
  exports["target"] = target;
  exports["value"] = value;
  exports["valueArray"] = valueArray;
  exports["color"] = color;
  exports["onKeyDown"] = onKeyDown;
  exports["onChange"] = onChange;
  exports["onClick"] = onClick;
  exports["unsafeMkProps"] = $foreign.unsafeMkProps;
  exports["unsafeFromPropsArray"] = $foreign.unsafeFromPropsArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["React.DOM"] = $PS["React.DOM"] || {};
  var exports = $PS["React.DOM"];
  var React = $PS["React"];
  var React_DOM_Props = $PS["React.DOM.Props"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var text = Unsafe_Coerce.unsafeCoerce;  
  var mkDOM = function (dynamic) {
      return function (tag) {
          return function (props) {
              var createElement = (function () {
                  if (!dynamic) {
                      return React.createElementTagName;
                  };
                  if (dynamic) {
                      return React.createElementTagNameDynamic;
                  };
                  throw new Error("Failed pattern match at React.DOM (line 15, column 5 - line 17, column 55): " + [ dynamic.constructor.name ]);
              })();
              return createElement(tag)(React_DOM_Props.unsafeFromPropsArray(props));
          };
      };
  };                              
  var style = mkDOM(false)("style");
  var div = mkDOM(false)("div");
  exports["text"] = text;
  exports["div"] = div;
  exports["style"] = style;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Concur.React.DOM"] = $PS["Concur.React.DOM"] || {};
  var exports = $PS["Concur.React.DOM"];
  var Concur_Core_DOM = $PS["Concur.Core.DOM"];
  var Concur_Core_LiftWidget = $PS["Concur.Core.LiftWidget"];
  var Concur_Core_Types = $PS["Concur.Core.Types"];
  var Data_Functor = $PS["Data.Functor"];
  var React_DOM = $PS["React.DOM"];                
  var viewAdapter = function (f) {
      return function (ps) {
          return function (vs) {
              return [ f(ps)(vs) ];
          };
      };
  };
  var text = function (dictLiftWidget) {
      return function (str) {
          return Concur_Core_LiftWidget.liftWidget(dictLiftWidget)(Concur_Core_Types.display([ React_DOM.text(str) ]));
      };
  };
  var el$prime = function (dictShiftMap) {
      return function (dictMultiAlternative) {
          return function (f) {
              return Concur_Core_DOM["el'"](dictShiftMap)(dictMultiAlternative)(Data_Functor.functorArray)(viewAdapter(f));
          };
      };
  };
  var style = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return el$prime(dictShiftMap)(dictMultiAlternative)(React_DOM.style);
      };
  };
  var div = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return el$prime(dictShiftMap)(dictMultiAlternative)(React_DOM.div);
      };
  };
  exports["el'"] = el$prime;
  exports["text"] = text;
  exports["div"] = div;
  exports["style"] = style;
})(PS);
(function(exports) {
  exports.classAppBar =  require('@material-ui/core/AppBar').default
  exports.classButton =  require('@material-ui/core/Button').default      
  exports.classCheckbox =  require('@material-ui/core/Checkbox').default
  exports.classContainer =  require('@material-ui/core/Container').default    
  exports.classDialog =  require('@material-ui/core/Dialog').default
  exports.classDialogActions =  require('@material-ui/core/DialogActions').default
  exports.classDialogContent =  require('@material-ui/core/DialogContent').default
  exports.classDialogContentText =  require('@material-ui/core/DialogContentText').default
  exports.classDialogTitle =  require('@material-ui/core/DialogTitle').default
  exports.classDivider =  require('@material-ui/core/Divider').default        
  exports.classFormControl =  require('@material-ui/core/FormControl').default
  // exports.classInputBaseComponent =  require('@material-ui/core/InputBaseComponent').default
  exports.classInputLabel =  require('@material-ui/core/InputLabel').default
  exports.classList =  require('@material-ui/core/List').default
  exports.classListItem =  require('@material-ui/core/ListItem').default                              
  exports.classListItemText =  require('@material-ui/core/ListItemText').default
  exports.classMenuItem =  require('@material-ui/core/MenuItem').default          
  exports.classPaper =  require('@material-ui/core/Paper').default    
  exports.classSelect =  require('@material-ui/core/Select').default
  // exports.classTabIndicator =  require('@material-ui/core/TabIndicator').default
  // exports.classTabScrollButton =  require('@material-ui/core/TabScrollButton').default
  exports.classTable =  require('@material-ui/core/Table').default
  exports.classTableBody =  require('@material-ui/core/TableBody').default
  exports.classTableCell =  require('@material-ui/core/TableCell').default    
  exports.classTableHead =  require('@material-ui/core/TableHead').default            
  // exports.classTablePaginationActions =  require('@material-ui/core/TablePaginationActions').default
  exports.classTableRow =  require('@material-ui/core/TableRow').default
  exports.classTextField =  require('@material-ui/core/TextField').default              
  // exports.classThemedComponent =  require('@material-ui/core/ThemedComponent').default
  exports.classToolbar =  require('@material-ui/core/Toolbar').default
  // exports.classTransition =  require('@material-ui/core/Transition').default
  exports.classTypography =  require('@material-ui/core/Typography').default
})(PS["Concur.React.MUI.FFI"] = PS["Concur.React.MUI.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Concur.React.MUI.FFI"] = $PS["Concur.React.MUI.FFI"] || {};
  var exports = $PS["Concur.React.MUI.FFI"];
  var $foreign = $PS["Concur.React.MUI.FFI"];
  exports["classAppBar"] = $foreign.classAppBar;
  exports["classButton"] = $foreign.classButton;
  exports["classCheckbox"] = $foreign.classCheckbox;
  exports["classContainer"] = $foreign.classContainer;
  exports["classDialog"] = $foreign.classDialog;
  exports["classDialogActions"] = $foreign.classDialogActions;
  exports["classDialogContent"] = $foreign.classDialogContent;
  exports["classDialogContentText"] = $foreign.classDialogContentText;
  exports["classDialogTitle"] = $foreign.classDialogTitle;
  exports["classDivider"] = $foreign.classDivider;
  exports["classFormControl"] = $foreign.classFormControl;
  exports["classInputLabel"] = $foreign.classInputLabel;
  exports["classList"] = $foreign.classList;
  exports["classListItem"] = $foreign.classListItem;
  exports["classListItemText"] = $foreign.classListItemText;
  exports["classMenuItem"] = $foreign.classMenuItem;
  exports["classPaper"] = $foreign.classPaper;
  exports["classSelect"] = $foreign.classSelect;
  exports["classTable"] = $foreign.classTable;
  exports["classTableBody"] = $foreign.classTableBody;
  exports["classTableCell"] = $foreign.classTableCell;
  exports["classTableHead"] = $foreign.classTableHead;
  exports["classTableRow"] = $foreign.classTableRow;
  exports["classTextField"] = $foreign.classTextField;
  exports["classToolbar"] = $foreign.classToolbar;
  exports["classTypography"] = $foreign.classTypography;
})(PS);
(function($PS) {
  "use strict";
  $PS["Concur.React.MUI.DOM"] = $PS["Concur.React.MUI.DOM"] || {};
  var exports = $PS["Concur.React.MUI.DOM"];
  var Concur_React_DOM = $PS["Concur.React.DOM"];
  var Concur_React_MUI_FFI = $PS["Concur.React.MUI.FFI"];
  var React = $PS["React"];
  var React_DOM_Props = $PS["React.DOM.Props"];                
  var mkDom = function (cls) {
      return function (dictMultiAlternative) {
          return function (dictShiftMap) {
              return Concur_React_DOM["el'"](dictShiftMap)(dictMultiAlternative)((function () {
                  var $216 = React.unsafeCreateElement(cls);
                  return function ($217) {
                      return $216(React_DOM_Props.unsafeFromPropsArray($217));
                  };
              })());
          };
      };
  };
  var paper = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classPaper)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var select = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classSelect)(dictMultiAlternative)(dictShiftMap);
      };
  };

  // tabIndicator :: El
  // tabIndicator = mkDom classTabIndicator
  // tabScrollButton :: El
  // tabScrollButton = mkDom classTabScrollButton
  var table = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classTable)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var tableBody = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classTableBody)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var tableCell = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classTableCell)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var tableHead = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classTableHead)(dictMultiAlternative)(dictShiftMap);
      };
  };

  // tablePaginationActions :: El
  // tablePaginationActions = mkDom classTablePaginationActions
  var tableRow = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classTableRow)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var textField = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classTextField)(dictMultiAlternative)(dictShiftMap);
      };
  };

  // themedComponent :: El
  // themedComponent = mkDom classThemedComponent
  var toolbar = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classToolbar)(dictMultiAlternative)(dictShiftMap);
      };
  };

  // transition :: El
  // transition = mkDom classTransition
  var typography = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classTypography)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var menuItem = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classMenuItem)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var listItemText = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classListItemText)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var listItem = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classListItem)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var list = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classList)(dictMultiAlternative)(dictShiftMap);
      };
  };

  // inputBaseComponent :: El
  // inputBaseComponent = mkDom classInputBaseComponent
  var inputLabel = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classInputLabel)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var formControl = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classFormControl)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var divider = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classDivider)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var dialogTitle = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classDialogTitle)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var dialogContentText = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classDialogContentText)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var dialogContent = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classDialogContent)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var dialogActions = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classDialogActions)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var dialog = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classDialog)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var container = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classContainer)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var checkbox = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classCheckbox)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var button = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classButton)(dictMultiAlternative)(dictShiftMap);
      };
  };
  var appBar = function (dictMultiAlternative) {
      return function (dictShiftMap) {
          return mkDom(Concur_React_MUI_FFI.classAppBar)(dictMultiAlternative)(dictShiftMap);
      };
  };
  exports["appBar"] = appBar;
  exports["button"] = button;
  exports["checkbox"] = checkbox;
  exports["container"] = container;
  exports["dialog"] = dialog;
  exports["dialogActions"] = dialogActions;
  exports["dialogContent"] = dialogContent;
  exports["dialogContentText"] = dialogContentText;
  exports["dialogTitle"] = dialogTitle;
  exports["divider"] = divider;
  exports["formControl"] = formControl;
  exports["inputLabel"] = inputLabel;
  exports["list"] = list;
  exports["listItem"] = listItem;
  exports["listItemText"] = listItemText;
  exports["menuItem"] = menuItem;
  exports["paper"] = paper;
  exports["select"] = select;
  exports["table"] = table;
  exports["tableBody"] = tableBody;
  exports["tableCell"] = tableCell;
  exports["tableHead"] = tableHead;
  exports["tableRow"] = tableRow;
  exports["textField"] = textField;
  exports["toolbar"] = toolbar;
  exports["typography"] = typography;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Concur.React.Props"] = $PS["Concur.React.Props"] || {};
  var exports = $PS["Concur.React.Props"];
  var Concur_Core_Props = $PS["Concur.Core.Props"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var React_DOM_Props = $PS["React.DOM.Props"];
  var valueArray = function ($7) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.valueArray($7));
  };
  var value = function ($8) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.value($8));
  };
  var unsafeTargetValue = function (e) {
      return e.target.value;
  };
  var unsafeMkPropHandler = function (s) {
      return new Concur_Core_Props.Handler(function (f) {
          return React_DOM_Props.unsafeMkProps(s)(Effect_Uncurried.mkEffectFn1(f));
      });
  };
  var unsafeMkProp = function (s) {
      return function (v) {
          return new Concur_Core_Props.PrimProp(React_DOM_Props.unsafeMkProps(s)(v));
      };
  };
  var target = function ($13) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.target($13));
  };
  var style = function ($17) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.style($17));
  };
  var placeholder = function ($56) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.placeholder($56));
  };
  var open = function ($59) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.open($59));
  };                                                                                     
  var onKeyDown = new Concur_Core_Props.Handler(React_DOM_Props.onKeyDown);          
  var onClick = new Concur_Core_Props.Handler(React_DOM_Props.onClick);                
  var onChange = new Concur_Core_Props.Handler(React_DOM_Props.onChange);
  var multiple = function ($65) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.multiple($65));
  };
  var label = function ($80) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.label($80));
  };
  var key = function ($84) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.key($84));
  };
  var isEnterEvent = function (e) {
      return e.which === 13 || e.keyCode === 13;
  };
  var onKeyEnter = Concur_Core_Props.filterProp(isEnterEvent)(onKeyDown);
  var htmlFor = function ($96) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.htmlFor($96));
  };
  var href = function ($98) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.href($98));
  };
  var disabled = function ($115) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.disabled($115));
  };
  var color = function ($134) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.color($134));
  };
  var className = function ($136) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.className($136));
  };
  var checked = function ($142) {
      return Concur_Core_Props.PrimProp.create(React_DOM_Props.checked($142));
  };
  exports["unsafeMkPropHandler"] = unsafeMkPropHandler;
  exports["unsafeMkProp"] = unsafeMkProp;
  exports["unsafeTargetValue"] = unsafeTargetValue;
  exports["style"] = style;
  exports["checked"] = checked;
  exports["className"] = className;
  exports["disabled"] = disabled;
  exports["href"] = href;
  exports["htmlFor"] = htmlFor;
  exports["key"] = key;
  exports["label"] = label;
  exports["multiple"] = multiple;
  exports["open"] = open;
  exports["placeholder"] = placeholder;
  exports["value"] = value;
  exports["valueArray"] = valueArray;
  exports["color"] = color;
  exports["onKeyEnter"] = onKeyEnter;
  exports["onChange"] = onChange;
  exports["onClick"] = onClick;
})(PS);
(function(exports) {
  "use strict";
  var ReactDOM =require("react-dom");
  var ReactDOMServer =require("react-dom/server"); 

  exports.renderImpl = function (element, container) {
    return ReactDOM.render(element, container);
  };
})(PS["ReactDOM"] = PS["ReactDOM"] || {});
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";          

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];                                   
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["ReactDOM"] = $PS["ReactDOM"] || {};
  var exports = $PS["ReactDOM"];
  var $foreign = $PS["ReactDOM"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];                                                                  
  var render = function (rEl) {
      return function (el) {
          return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)(function () {
              return $foreign.renderImpl(rEl, el);
          });
      };
  };
  exports["render"] = render;
})(PS);
(function(exports) {
  "use strict";

  exports._getElementById = function (id) {
    return function (node) {
      return function () {
        return node.getElementById(id);
      };
    };
  };
})(PS["Web.DOM.NonElementParentNode"] = PS["Web.DOM.NonElementParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.DOM.NonElementParentNode"] = $PS["Web.DOM.NonElementParentNode"] || {};
  var exports = $PS["Web.DOM.NonElementParentNode"];
  var $foreign = $PS["Web.DOM.NonElementParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];                
  var getElementById = function (eid) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_getElementById"](eid);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["getElementById"] = getElementById;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];     
  var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNonElementParentNode"] = toNonElementParentNode;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Concur.React.Run"] = $PS["Concur.React.Run"] || {};
  var exports = $PS["Concur.React.Run"];
  var Concur_React = $PS["Concur.React"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var ReactDOM = $PS["ReactDOM"];
  var Web_DOM_NonElementParentNode = $PS["Web.DOM.NonElementParentNode"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var runWidgetInDom = function (elemId) {
      return function (w) {
          return function __do() {
              var win = Web_HTML.window();
              var doc = Web_HTML_Window.document(win)();
              var node = Web_HTML_HTMLDocument.toNonElementParentNode(doc);
              var mroot = Web_DOM_NonElementParentNode.getElementById(elemId)(node)();
              if (mroot instanceof Data_Maybe.Nothing) {
                  return Data_Unit.unit;
              };
              if (mroot instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Effect.functorEffect)(ReactDOM.render(Concur_React.renderComponent(w))(mroot.value0))();
              };
              throw new Error("Failed pattern match at Concur.React.Run (line 23, column 3 - line 25, column 65): " + [ mroot.constructor.name ]);
          };
      };
  };
  exports["runWidgetInDom"] = runWidgetInDom;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["put"] = put;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 43, column 3 - line 43, column 32): " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return Data_Functor.map(dictFunctor)(mapLeft(f))(v);
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  };
  var monadTransExceptT = {
      lift: function (dictMonad) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
              });
          };
      }
  };
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return {
          map: function (f) {
              return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
          }
      };
  };
  var monadExceptT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeExceptT(dictMonad);
          },
          Bind1: function () {
              return bindExceptT(dictMonad);
          }
      };
  };
  var bindExceptT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (k) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                      var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                      return function ($92) {
                          return $91(Data_Either.Left.create($92));
                      };
                  })())(function (a) {
                      var v1 = k(a);
                      return v1;
                  }));
              };
          },
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var applyExceptT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadExceptT(dictMonad)),
          Functor0: function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeExceptT = function (dictMonad) {
      return {
          pure: (function () {
              var $93 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($94) {
                  return ExceptT($93(Data_Either.Right.create($94)));
              };
          })(),
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var monadStateExceptT = function (dictMonadState) {
      return {
          state: function (f) {
              return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
          },
          Monad0: function () {
              return monadExceptT(dictMonadState.Monad0());
          }
      };
  };
  var monadThrowExceptT = function (dictMonad) {
      return {
          throwError: (function () {
              var $103 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($104) {
                  return ExceptT($103(Data_Either.Left.create($104)));
              };
          })(),
          Monad0: function () {
              return monadExceptT(dictMonad);
          }
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];              
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = {
      map: function (f) {
          return function (m) {
              return f(m);
          };
      }
  };
  var applyIdentity = {
      apply: function (v) {
          return function (v1) {
              return v(v1);
          };
      },
      Functor0: function () {
          return functorIdentity;
      }
  };
  var bindIdentity = {
      bind: function (v) {
          return function (f) {
              return f(v);
          };
      },
      Apply0: function () {
          return applyIdentity;
      }
  };
  var applicativeIdentity = {
      pure: Identity,
      Apply0: function () {
          return applyIdentity;
      }
  };
  var monadIdentity = {
      Applicative0: function () {
          return applicativeIdentity;
      },
      Bind1: function () {
          return bindIdentity;
      }
  };
  exports["Identity"] = Identity;
  exports["functorIdentity"] = functorIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function () {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = Safe_Coerce.coerce;
  exports["unwrap"] = unwrap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
  exports["withExcept"] = withExcept;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];                    
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };
  var functorStateT = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(function (v1) {
                          return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                      })(v(s));
                  };
              };
          }
      };
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeStateT(dictMonad);
          },
          Bind1: function () {
              return bindStateT(dictMonad);
          }
      };
  };
  var bindStateT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (f) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                          var v3 = f(v1.value0);
                          return v3(v1.value1);
                      });
                  };
              };
          },
          Apply0: function () {
              return applyStateT(dictMonad);
          }
      };
  };
  var applyStateT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadStateT(dictMonad)),
          Functor0: function () {
              return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeStateT = function (dictMonad) {
      return {
          pure: function (a) {
              return function (s) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
              };
          },
          Apply0: function () {
              return applyStateT(dictMonad);
          }
      };
  };
  var monadStateStateT = function (dictMonad) {
      return {
          state: function (f) {
              var $113 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($114) {
                  return $113(f($114));
              };
          },
          Monad0: function () {
              return monadStateT(dictMonad);
          }
      };
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];              
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var bifunctorEither = {
      bimap: function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v(v2.value0));
                  };
                  if (v2 instanceof Data_Either.Right) {
                      return new Data_Either.Right(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      }
  };
  exports["lmap"] = lmap;
  exports["bifunctorEither"] = bifunctorEither;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var top = function (dict) {
      return dict.top;
  };
  var boundedInt = {
      top: $foreign.topInt,
      bottom: $foreign.bottomInt,
      Ord0: function () {
          return Data_Ord.ordInt;
      }
  };
  var boundedChar = {
      top: $foreign.topChar,
      bottom: $foreign.bottomChar,
      Ord0: function () {
          return Data_Ord.ordChar;
      }
  };
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = {
      succ: defaultSucc(charToEnum)($foreign.toCharCode),
      pred: defaultPred(charToEnum)($foreign.toCharCode),
      Ord0: function () {
          return Data_Ord.ordChar;
      }
  };
  var boundedEnumChar = {
      cardinality: $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0,
      toEnum: charToEnum,
      fromEnum: $foreign.toCharCode,
      Bounded0: function () {
          return Data_Bounded.boundedChar;
      },
      Enum1: function () {
          return enumChar;
      }
  };
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                              
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["fromCharCode"] = fromCharCode;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var semiringInt = {
      add: $foreign.intAdd,
      zero: 0,
      mul: $foreign.intMul,
      one: 1
  };
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var ringInt = {
      sub: $foreign.intSub,
      Semiring0: function () {
          return Data_Semiring.semiringInt;
      }
  };
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var commutativeRingInt = {
      Ring0: function () {
          return Data_Ring.ringInt;
      }
  };
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var mod = function (dict) {
      return dict.mod;
  };
  var euclideanRingInt = {
      degree: $foreign.intDegree,
      div: $foreign.intDiv,
      mod: $foreign.intMod,
      CommutativeRing0: function () {
          return Data_CommutativeRing.commutativeRingInt;
      }
  };
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var from = function (dict) {
      return dict.from;
  };
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $171 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($172) {
          return Data_List_Types.NonEmptyList($171($172));
      };
  })();
  exports["singleton"] = singleton;
})(PS);
(function(exports) {
  "use strict";

  exports.intercalate = function (separator) {
    return function (xs) {
      var len = xs.length;
      if (len === 0) return "";

      var res = xs[0];
      for (var i = 1; i < len; i++) {
        res = res + separator + xs[i];
      }
      return res;
    };
  };
})(PS["Data.Show.Generic"] = PS["Data.Show.Generic"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Show.Generic"] = $PS["Data.Show.Generic"] || {};
  var exports = $PS["Data.Show.Generic"];
  var $foreign = $PS["Data.Show.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var genericShowArgsNoArguments = {
      genericShowArgs: function (v) {
          return [  ];
      }
  };
  var genericShowArgsArgument = function (dictShow) {
      return {
          genericShowArgs: function (v) {
              return [ Data_Show.show(dictShow)(v) ];
          }
      };
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return {
              "genericShow'": function (v) {
                  var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                  var v1 = genericShowArgs(dictGenericShowArgs)(v);
                  if (v1.length === 0) {
                      return ctor;
                  };
                  return "(" + ($foreign.intercalate(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
              }
          };
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  };
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return {
              "genericShow'": function (v) {
                  if (v instanceof Data_Generic_Rep.Inl) {
                      return genericShow$prime(dictGenericShow)(v.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr) {
                      return genericShow$prime(dictGenericShow1)(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Show.Generic (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
              }
          };
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["genericShow"] = genericShow;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowConstructor"] = genericShowConstructor;
  exports["genericShowArgsArgument"] = genericShowArgsArgument;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var unfoldable1Array = {
      unfoldr1: $foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd)
  };
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = {
      unfoldr: $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd),
      Unfoldable10: function () {
          return Data_Unfoldable1.unfoldable1Array;
      }
  };
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  };
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["uncons"] = uncons;
})(PS);
(function(exports) {
  "use strict";

  exports.trim = function (s) {
    return s.trim();
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["trim"] = $foreign.trim;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = {
      traverse: function (dictApplicative) {
          return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
      },
      sequence: function (dictApplicative) {
          return sequenceDefault(traversableArray)(dictApplicative);
      },
      Functor0: function () {
          return Data_Functor.functorArray;
      },
      Foldable1: function () {
          return Data_Foldable.foldableArray;
      }
  };
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Traversable = $PS["Data.Traversable"];  
  var traverseWithIndexDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              var $64 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
              var $65 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
              return function ($66) {
                  return $64($65($66));
              };
          };
      };
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  var traversableWithIndexArray = {
      traverseWithIndex: function (dictApplicative) {
          return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
      },
      FunctorWithIndex0: function () {
          return Data_FunctorWithIndex.functorWithIndexArray;
      },
      FoldableWithIndex1: function () {
          return Data_FoldableWithIndex.foldableWithIndexArray;
      },
      Traversable2: function () {
          return Data_Traversable.traversableArray;
      }
  };
  exports["traverseWithIndex"] = traverseWithIndex;
  exports["traversableWithIndexArray"] = traversableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  "use strict";

  // Local storage functions

  // exports.storageLength = function() {
  //   return window.localStorage.length;
  // };

  exports.storageGet = function(key) {
    return function() {
      return window.localStorage.getItem(key);
    };
  };

  exports.storageSet = function(key) {
    return function(val) {
      return function() {
        window.localStorage.setItem(key, val);
      };
    };
  };
})(PS["FFI"] = PS["FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["FFI"] = $PS["FFI"] || {};
  var exports = $PS["FFI"];
  var $foreign = $PS["FFI"];
  exports["storageGet"] = $foreign.storageGet;
  exports["storageSet"] = $foreign.storageSet;
})(PS);
(function(exports) {
  "use strict";

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
  var fail = function (dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function ($119) {
          return $118(Data_List_NonEmpty.singleton($119));
      };
  };
  var readArray = function (dictMonad) {
      return function (value) {
          if ($foreign.isArray(value)) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(dictMonad)(new TypeMismatch("array", $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign (line 151, column 1 - line 151, column 66): " + [ value.constructor.name ]);
      };
  };
  var unsafeReadTagged = function (dictMonad) {
      return function (tag) {
          return function (value) {
              if ($foreign.tagOf(value) === tag) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [ tag.constructor.name, value.constructor.name ]);
          };
      };
  };
  var readString = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("String");
  };
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["unsafeToForeign"] = unsafeToForeign;
  exports["readString"] = readString;
  exports["readArray"] = readArray;
  exports["fail"] = fail;
  exports["typeOf"] = $foreign.typeOf;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Foreign = $PS["Foreign"];                
  var unsafeReadProp = function (dictMonad) {
      return function (k) {
          return function (value) {
              return $foreign.unsafeReadPropImpl(Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad)), k, value);
          };
      };
  };
  var readProp = function (dictMonad) {
      return unsafeReadProp(dictMonad);
  };
  exports["readProp"] = readProp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Text.Parsing.Parser.Pos"] = $PS["Text.Parsing.Parser.Pos"] || {};
  var exports = $PS["Text.Parsing.Parser.Pos"];
  var initialPos = {
      line: 1,
      column: 1
  };
  exports["initialPos"] = initialPos;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Text.Parsing.Parser"] = $PS["Text.Parsing.Parser"] || {};
  var exports = $PS["Text.Parsing.Parser"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var ParseState = (function () {
      function ParseState(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ParseState.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ParseState(value0, value1, value2);
              };
          };
      };
      return ParseState;
  })();
  var ParseError = (function () {
      function ParseError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseError.create = function (value0) {
          return function (value1) {
              return new ParseError(value0, value1);
          };
      };
      return ParseError;
  })();
  var ParserT = function (x) {
      return x;
  };
  var parseErrorMessage = function (v) {
      return v.value0;
  };
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
              return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p)))(initialState);
          };
      };
  };
  var runParser = function (s) {
      var $88 = Data_Newtype.unwrap();
      var $89 = runParserT(Data_Identity.monadIdentity)(s);
      return function ($90) {
          return $88($89($90));
      };
  };
  var monadThrowParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var monadStateParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
  };
  var position = function (dictMonad) {
      return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
          return v.value1;
      });
  };                            
  var functorParserT = function (dictFunctor) {
      return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
  };
  var failWithPosition = function (dictMonad) {
      return function (message) {
          return function (pos) {
              return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
          };
      };
  };
  var bindParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var fail = function (dictMonad) {
      return function (message) {
          return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
      };
  };
  var applicativeParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var altParserT = function (dictMonad) {
      return {
          alt: function (p1) {
              return function (p2) {
                  return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
                      return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p1)))(new ParseState(v.value0, v.value1, false)))(function (v1) {
                          if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) {
                              return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p2)))(v);
                          };
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
                      });
                  })));
              };
          },
          Functor0: function () {
              return functorParserT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  exports["ParseError"] = ParseError;
  exports["parseErrorMessage"] = parseErrorMessage;
  exports["ParseState"] = ParseState;
  exports["ParserT"] = ParserT;
  exports["runParser"] = runParser;
  exports["fail"] = fail;
  exports["functorParserT"] = functorParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadStateParserT"] = monadStateParserT;
  exports["altParserT"] = altParserT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Text.Parsing.Parser.Combinators"] = $PS["Text.Parsing.Parser.Combinators"] || {};
  var exports = $PS["Text.Parsing.Parser.Combinators"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var withErrorMessage = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };
  var tryRethrow = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(v1.value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  exports["tryRethrow"] = tryRethrow;
  exports["withErrorMessage"] = withErrorMessage;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Text.Parsing.Parser.String"] = $PS["Text.Parsing.Parser.String"] || {};
  var exports = $PS["Text.Parsing.Parser.String"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Char = $PS["Data.Char"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var unCodePoint = Unsafe_Coerce.unsafeCoerce;
  var updatePosSingle = function (v) {
      return function (cp) {
          var v1 = unCodePoint(cp);
          if (v1 === 10) {
              return {
                  line: v.line + 1 | 0,
                  column: 1
              };
          };
          if (v1 === 13) {
              return {
                  line: v.line + 1 | 0,
                  column: 1
              };
          };
          if (v1 === 9) {
              return {
                  line: v.line,
                  column: (v.column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.column - 1 | 0)(8) | 0
              };
          };
          return {
              line: v.line,
              column: v.column + 1 | 0
          };
      };
  };
  var anyCodePoint = function (dictMonad) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.get(Text_Parsing_Parser.monadStateParserT(dictMonad)))(function (v) {
          var v1 = Data_String_CodePoints.uncons(v.value0);
          if (v1 instanceof Data_Maybe.Nothing) {
              return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
          };
          if (v1 instanceof Data_Maybe.Just) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.put(Text_Parsing_Parser.monadStateParserT(dictMonad))(new Text_Parsing_Parser.ParseState(v1.value0.tail, updatePosSingle(v.value1)(v1.value0.head), true)))(function () {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0.head);
              });
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 110, column 3 - line 114, column 16): " + [ v1.constructor.name ]);
      });
  };
  var anyChar = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(unCodePoint)(anyCodePoint(dictMonad)))(function (v) {
          var $100 = v > 65535;
          if ($100) {
              return Text_Parsing_Parser.fail(dictMonad)("Not a Char");
          };
          var v1 = Data_Char.fromCharCode(v);
          if (v1 instanceof Data_Maybe.Nothing) {
              return Text_Parsing_Parser.fail(dictMonad)("Not a Char");
          };
          if (v1 instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0);
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 101, column 8 - line 103, column 21): " + [ v1.constructor.name ]);
      }));
  };
  var satisfy = function (dictMonad) {
      return function (f) {
          return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictMonad))(function (c) {
              var $103 = f(c);
              if ($103) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(c);
              };
              return Text_Parsing_Parser.fail(dictMonad)("Predicate unsatisfied");
          }));
      };
  };
  var $$char = function (dictMonad) {
      return function (c) {
          return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictMonad)(function (v) {
              return v === c;
          }))(Data_Show.show(Data_Show.showChar)(c));
      };
  };
  exports["char"] = $$char;
})(PS);
(function(exports) {
  exports._parseJSON = JSON.parse;

  exports._undefined = undefined;

  exports._unsafeStringify = JSON.stringify;
})(PS["Simple.JSON"] = PS["Simple.JSON"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var get = function (dictIsSymbol) {
      return function () {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS);
(function(exports) {
  "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeInsert = function(l) {
    return function(a) {
      return function(rec) {
        rec[l] = a;
        return rec;
      };
    };
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Record.Builder"] = $PS["Record.Builder"] || {};
  var exports = $PS["Record.Builder"];
  var $foreign = $PS["Record.Builder"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Symbol = $PS["Data.Symbol"];
  var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
  var insert = function () {
      return function () {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (a) {
                      return function (r1) {
                          return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                      };
                  };
              };
          };
      };
  };
  var categoryBuilder = Control_Category.categoryFn;
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  exports["build"] = build;
  exports["insert"] = insert;
  exports["semigroupoidBuilder"] = semigroupoidBuilder;
  exports["categoryBuilder"] = categoryBuilder;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Simple.JSON"] = $PS["Simple.JSON"] || {};
  var exports = $PS["Simple.JSON"];
  var $foreign = $PS["Simple.JSON"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Record = $PS["Record"];
  var Record_Builder = $PS["Record.Builder"];
  var Type_Proxy = $PS["Type.Proxy"];
  var writeImplFields = function (dict) {
      return dict.writeImplFields;
  };
  var writeImpl = function (dict) {
      return dict.writeImpl;
  };
  var writeJSON = function (dictWriteForeign) {
      var $82 = writeImpl(dictWriteForeign);
      return function ($83) {
          return $foreign["_unsafeStringify"]($82($83));
      };
  };
  var writeForeignString = {
      writeImpl: Foreign.unsafeToForeign
  };
  var writeForeignArray = function (dictWriteForeign) {
      return {
          writeImpl: function (xs) {
              return Foreign.unsafeToForeign(Data_Functor.map(Data_Functor.functorArray)(writeImpl(dictWriteForeign))(xs));
          }
      };
  };                                                 
  var $$undefined = $foreign["_undefined"];
  var writeForeignMaybe = function (dictWriteForeign) {
      return {
          writeImpl: Data_Maybe.maybe($$undefined)(writeImpl(dictWriteForeign))
      };
  };
  var recordWriteForeign = function () {
      return function (dictWriteForeignFields) {
          return {
              writeImpl: function (rec) {
                  var steps = writeImplFields(dictWriteForeignFields)(Type_Proxy["Proxy"].value)(rec);
                  return Foreign.unsafeToForeign(Record_Builder.build(steps)({}));
              }
          };
      };
  };
  var readString = {
      readImpl: Foreign.readString(Data_Identity.monadIdentity)
  };
  var readImpl = function (dict) {
      return dict.readImpl;
  };
  var readMaybe = function (dictReadForeign) {
      return {
          readImpl: (function () {
              var readNullOrUndefined = function (v) {
                  return function (value) {
                      if (Foreign.isNull(value) || Foreign.isUndefined(value)) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
                      };
                      return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(v(value));
                  };
              };
              return readNullOrUndefined(readImpl(dictReadForeign));
          })()
      };
  };
  var readFieldsNil = {
      getFields: function (v) {
          return function (v1) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Category.identity(Record_Builder.categoryBuilder));
          };
      }
  };
  var readArray = function (dictReadForeign) {
      return {
          readImpl: (function () {
              var readAtIdx = function (i) {
                  return function (f) {
                      return Control_Monad_Except.withExcept(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtIndex.create(i)))(readImpl(dictReadForeign)(f));
                  };
              };
              return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(readAtIdx))(Foreign.readArray(Data_Identity.monadIdentity));
          })()
      };
  };
  var parseJSON = (function () {
      var $97 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)((function () {
          var $100 = Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList);
          return function ($101) {
              return $100(Foreign.ForeignError.create(Effect_Exception.message($101)));
          };
      })());
      var $98 = Effect_Uncurried.runEffectFn1($foreign["_parseJSON"]);
      return function ($99) {
          return Control_Monad_Except_Trans.ExceptT(Data_Identity.Identity($97(Effect_Unsafe.unsafePerformEffect(Effect_Exception["try"]($98($99))))));
      };
  })();
  var readJSON = function (dictReadForeign) {
      var $102 = Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign))(parseJSON);
      return function ($103) {
          return Control_Monad_Except.runExcept($102($103));
      };
  };
  var nilWriteForeignFields = {
      writeImplFields: function (v) {
          return function (v1) {
              return Control_Category.identity(Record_Builder.categoryBuilder);
          };
      }
  };
  var getFields = function (dict) {
      return dict.getFields;
  };
  var readRecord = function () {
      return function (dictReadForeignFields) {
          return {
              readImpl: function (o) {
                  return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Function.flip(Record_Builder.build)({}))(getFields(dictReadForeignFields)(Type_Proxy["Proxy"].value)(o));
              }
          };
      };
  };
  var consWriteForeignFields = function (dictIsSymbol) {
      return function (dictWriteForeign) {
          return function (dictWriteForeignFields) {
              return function () {
                  return function () {
                      return function () {
                          return {
                              writeImplFields: function (v) {
                                  return function (rec) {
                                      var rest = writeImplFields(dictWriteForeignFields)(Type_Proxy["Proxy"].value)(rec);
                                      var value = writeImpl(dictWriteForeign)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(rec));
                                      var result = Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()()(dictIsSymbol)(Data_Symbol.SProxy.value)(value))(rest);
                                      return result;
                                  };
                              }
                          };
                      };
                  };
              };
          };
      };
  };
  var applyEither = function (dictSemigroup) {
      return function (v) {
          return function (v1) {
              if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Right) {
                  return new Data_Either.Left(v.value0);
              };
              if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                  return new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Left) {
                  return new Data_Either.Left(v1.value0);
              };
              if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                  return new Data_Either.Right(v.value0(v1.value0));
              };
              throw new Error("Failed pattern match at Simple.JSON (line 241, column 1 - line 241, column 90): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var exceptTApply = function (dictSemigroup) {
      return function (dictApplicative) {
          return function (fun) {
              return function (a) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(applyEither(dictSemigroup))(Control_Monad_Except_Trans.runExceptT(fun)))(Control_Monad_Except_Trans.runExceptT(a));
              };
          };
      };
  };
  var readFieldsCons = function (dictIsSymbol) {
      return function (dictReadForeign) {
          return function (dictReadForeignFields) {
              return function () {
                  return function () {
                      return {
                          getFields: function (v) {
                              return function (obj) {
                                  var rest = getFields(dictReadForeignFields)(Type_Proxy["Proxy"].value)(obj);
                                  var name = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                                  var withExcept$prime = Control_Monad_Except.withExcept(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtProperty.create(name)));
                                  var first = Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(withExcept$prime(Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign))(Foreign_Index.readProp(Data_Identity.monadIdentity)(name)(obj))))(function (value) {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Record_Builder.insert()()(dictIsSymbol)(Data_Symbol.SProxy.value)(value));
                                  });
                                  return exceptTApply(Data_List_Types.semigroupNonEmptyList)(Data_Identity.applicativeIdentity)(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder))(first))(rest);
                              };
                          }
                      };
                  };
              };
          };
      };
  };
  exports["readJSON"] = readJSON;
  exports["writeJSON"] = writeJSON;
  exports["writeImpl"] = writeImpl;
  exports["readString"] = readString;
  exports["readArray"] = readArray;
  exports["readMaybe"] = readMaybe;
  exports["readRecord"] = readRecord;
  exports["readFieldsCons"] = readFieldsCons;
  exports["readFieldsNil"] = readFieldsNil;
  exports["writeForeignString"] = writeForeignString;
  exports["writeForeignArray"] = writeForeignArray;
  exports["writeForeignMaybe"] = writeForeignMaybe;
  exports["recordWriteForeign"] = recordWriteForeign;
  exports["consWriteForeignFields"] = consWriteForeignFields;
  exports["nilWriteForeignFields"] = nilWriteForeignFields;
})(PS);
(function($PS) {
  "use strict";
  $PS["Types"] = $PS["Types"] || {};
  var exports = $PS["Types"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Foreign = $PS["Foreign"];
  var Simple_JSON = $PS["Simple.JSON"];                
  var Deutsch = (function () {
      function Deutsch() {

      };
      Deutsch.value = new Deutsch();
      return Deutsch;
  })();
  var Englisch = (function () {
      function Englisch() {

      };
      Englisch.value = new Englisch();
      return Englisch;
  })();

  //----------------- MESSAGES  ------------------
  var Input = (function () {
      function Input(value0) {
          this.value0 = value0;
      };
      Input.create = function (value0) {
          return new Input(value0);
      };
      return Input;
  })();

  //----------------- MESSAGES  ------------------
  var GoEdit = (function () {
      function GoEdit() {

      };
      GoEdit.value = new GoEdit();
      return GoEdit;
  })();

  //----------------- MODEL ----------------
  //
  var M = (function () {
      function M() {

      };
      M.value = new M();
      return M;
  })();

  //----------------- MODEL ----------------
  //
  var W = (function () {
      function W() {

      };
      W.value = new W();
      return W;
  })();
  var ChangeGeschlecht = (function () {
      function ChangeGeschlecht(value0) {
          this.value0 = value0;
      };
      ChangeGeschlecht.create = function (value0) {
          return new ChangeGeschlecht(value0);
      };
      return ChangeGeschlecht;
  })();
  var ChangeVorname = (function () {
      function ChangeVorname(value0) {
          this.value0 = value0;
      };
      ChangeVorname.create = function (value0) {
          return new ChangeVorname(value0);
      };
      return ChangeVorname;
  })();
  var ChangeNachname = (function () {
      function ChangeNachname(value0) {
          this.value0 = value0;
      };
      ChangeNachname.create = function (value0) {
          return new ChangeNachname(value0);
      };
      return ChangeNachname;
  })();
  var ChangeSprache = (function () {
      function ChangeSprache(value0) {
          this.value0 = value0;
      };
      ChangeSprache.create = function (value0) {
          return new ChangeSprache(value0);
      };
      return ChangeSprache;
  })();
  var ChangeTitel = (function () {
      function ChangeTitel(value0) {
          this.value0 = value0;
      };
      ChangeTitel.create = function (value0) {
          return new ChangeTitel(value0);
      };
      return ChangeTitel;
  })();
  var Save = (function () {
      function Save() {

      };
      Save.value = new Save();
      return Save;
  })();
  var AddTitel = (function () {
      function AddTitel() {

      };
      AddTitel.value = new AddTitel();
      return AddTitel;
  })();
  var InputTitel = (function () {
      function InputTitel(value0) {
          this.value0 = value0;
      };
      InputTitel.create = function (value0) {
          return new InputTitel(value0);
      };
      return InputTitel;
  })();
  var OpenDialog = (function () {
      function OpenDialog() {

      };
      OpenDialog.value = new OpenDialog();
      return OpenDialog;
  })();
  var CloseDialog = (function () {
      function CloseDialog() {

      };
      CloseDialog.value = new CloseDialog();
      return CloseDialog;
  })();
  var Insert = (function () {
      function Insert(value0) {
          this.value0 = value0;
      };
      Insert.create = function (value0) {
          return new Insert(value0);
      };
      return Insert;
  })();
  var Edit = (function () {
      function Edit(value0) {
          this.value0 = value0;
      };
      Edit.create = function (value0) {
          return new Edit(value0);
      };
      return Edit;
  })();
  var Dialog = (function () {
      function Dialog(value0) {
          this.value0 = value0;
      };
      Dialog.create = function (value0) {
          return new Dialog(value0);
      };
      return Dialog;
  })();
  var InsertMode = (function () {
      function InsertMode() {

      };
      InsertMode.value = new InsertMode();
      return InsertMode;
  })();
  var EditMode = (function () {
      function EditMode() {

      };
      EditMode.value = new EditMode();
      return EditMode;
  })();
  var DialogMode = (function () {
      function DialogMode() {

      };
      DialogMode.value = new DialogMode();
      return DialogMode;
  })();

  //----------------- STATE  ------------------
  //
  var NothingYet = (function () {
      function NothingYet() {

      };
      NothingYet.value = new NothingYet();
      return NothingYet;
  })();

  //----------------- STATE  ------------------
  //
  var Failed = (function () {
      function Failed(value0) {
          this.value0 = value0;
      };
      Failed.create = function (value0) {
          return new Failed(value0);
      };
      return Failed;
  })();

  //----------------- STATE  ------------------
  //
  var Success = (function () {
      function Success(value0) {
          this.value0 = value0;
      };
      Success.create = function (value0) {
          return new Success(value0);
      };
      return Success;
  })();
  var spracheWriteForeign = {
      writeImpl: function (v) {
          if (v instanceof Deutsch) {
              return Simple_JSON.writeImpl(Simple_JSON.writeForeignString)("Deutsch");
          };
          if (v instanceof Englisch) {
              return Simple_JSON.writeImpl(Simple_JSON.writeForeignString)("Englisch");
          };
          throw new Error("Failed pattern match at Types (line 174, column 1 - line 176, column 44): " + [ v.constructor.name ]);
      }
  };
  var spracheReadForeign = {
      readImpl: function (f) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity)(f))(function (s) {
              if (s === "Deutsch") {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Deutsch.value);
              };
              if (s === "Englisch") {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Englisch.value);
              };
              return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton(new Foreign.ForeignError("Sprache konnte nicht gelesen werden.")));
          });
      }
  };
  var initialModel = {
      "_data": {
          anreden: [  ],
          titel: [ "Dr. rer. nat.", "Dr. h.c.", "Dr.-Ing", "Dr.", "Prof.", "Doktor", "Professor" ]
      },
      state: NothingYet.value,
      inputRaw: "",
      mode: InsertMode.value,
      titelInputRaw: "",
      prevMode: Data_Maybe.Nothing.value
  };
  var geschlechtWriteForeign = {
      writeImpl: function (v) {
          if (v instanceof M) {
              return Simple_JSON.writeImpl(Simple_JSON.writeForeignString)("M");
          };
          if (v instanceof W) {
              return Simple_JSON.writeImpl(Simple_JSON.writeForeignString)("W");
          };
          throw new Error("Failed pattern match at Types (line 178, column 1 - line 180, column 30): " + [ v.constructor.name ]);
      }
  };
  var geschlechtReadForeign = {
      readImpl: function (f) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity)(f))(function (s) {
              if (s === "M") {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(M.value);
              };
              if (s === "W") {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(W.value);
              };
              return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton(new Foreign.ForeignError("Geschlecht konnte nicht gelesen werden.")));
          });
      }
  };

  //------------------------------------------------------------------------------
  //-------------------------------- INSTANCES -----------------------------------
  //------------------------------------------------------------------------------
  // Das sind vom Typsystem generierte Funktionen zum (De-)Serialisieren,
  // Vergleichen und Anzeigen von Datentypen
  //
  var genericSprache = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return Deutsch.value;
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return Englisch.value;
          };
          throw new Error("Failed pattern match at Types (line 112, column 1 - line 112, column 52): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof Deutsch) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof Englisch) {
              return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
          };
          throw new Error("Failed pattern match at Types (line 112, column 1 - line 112, column 52): " + [ x.constructor.name ]);
      }
  };
  var showSprache = {
      show: Data_Show_Generic.genericShow(genericSprache)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "Deutsch";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "Englisch";
          }
      })))
  };
  var genericMsg = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new Insert(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new Edit(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
              return new Dialog(x.value0.value0);
          };
          throw new Error("Failed pattern match at Types (line 138, column 1 - line 138, column 44): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof Insert) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof Edit) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof Dialog) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
          };
          throw new Error("Failed pattern match at Types (line 138, column 1 - line 138, column 44): " + [ x.constructor.name ]);
      }
  };
  var genericIMsg = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new Input(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return GoEdit.value;
          };
          throw new Error("Failed pattern match at Types (line 143, column 1 - line 143, column 51): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof Input) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof GoEdit) {
              return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
          };
          throw new Error("Failed pattern match at Types (line 143, column 1 - line 143, column 51): " + [ x.constructor.name ]);
      }
  };
  var showIMsg = {
      show: Data_Show_Generic.genericShow(genericIMsg)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
          reflectSymbol: function () {
              return "Input";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "GoEdit";
          }
      })))
  };
  var genericGeschlecht = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return M.value;
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return W.value;
          };
          throw new Error("Failed pattern match at Types (line 119, column 1 - line 119, column 58): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof M) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof W) {
              return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
          };
          throw new Error("Failed pattern match at Types (line 119, column 1 - line 119, column 58): " + [ x.constructor.name ]);
      }
  };
  var showGeschlecht = {
      show: Data_Show_Generic.genericShow(genericGeschlecht)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "M";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "W";
          }
      })))
  };
  var genericEMsg = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new ChangeGeschlecht(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new ChangeVorname(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new ChangeNachname(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new ChangeSprache(x.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return new ChangeTitel(x.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
              return Save.value;
          };
          throw new Error("Failed pattern match at Types (line 153, column 1 - line 153, column 49): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof ChangeGeschlecht) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof ChangeVorname) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof ChangeNachname) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof ChangeSprache) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
          };
          if (x instanceof ChangeTitel) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
          };
          if (x instanceof Save) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))));
          };
          throw new Error("Failed pattern match at Types (line 153, column 1 - line 153, column 49): " + [ x.constructor.name ]);
      }
  };
  var showEMsg = {
      show: Data_Show_Generic.genericShow(genericEMsg)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(showGeschlecht)))({
          reflectSymbol: function () {
              return "ChangeGeschlecht";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(Data_Show.showString)))({
          reflectSymbol: function () {
              return "ChangeVorname";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
          reflectSymbol: function () {
              return "ChangeNachname";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showSprache))({
          reflectSymbol: function () {
              return "ChangeSprache";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(Data_Show.showString)))({
          reflectSymbol: function () {
              return "ChangeTitel";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "Save";
          }
      })))))))
  };
  var genericDMsg = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return AddTitel.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new InputTitel(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return OpenDialog.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
              return CloseDialog.value;
          };
          throw new Error("Failed pattern match at Types (line 148, column 1 - line 148, column 51): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof AddTitel) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof InputTitel) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof OpenDialog) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
          };
          if (x instanceof CloseDialog) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
          };
          throw new Error("Failed pattern match at Types (line 148, column 1 - line 148, column 51): " + [ x.constructor.name ]);
      }
  };
  var showDMsg = {
      show: Data_Show_Generic.genericShow(genericDMsg)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "AddTitel";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
          reflectSymbol: function () {
              return "InputTitel";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "OpenDialog";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CloseDialog";
          }
      })))))
  };
  var showMsg = {
      show: Data_Show_Generic.genericShow(genericMsg)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showIMsg))({
          reflectSymbol: function () {
              return "Insert";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showEMsg))({
          reflectSymbol: function () {
              return "Edit";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showDMsg))({
          reflectSymbol: function () {
              return "Dialog";
          }
      }))))
  };
  var eqSprache = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Deutsch && y instanceof Deutsch) {
                  return true;
              };
              if (x instanceof Englisch && y instanceof Englisch) {
                  return true;
              };
              return false;
          };
      }
  };
  var eqGeschlecht = {
      eq: function (x) {
          return function (y) {
              if (x instanceof M && y instanceof M) {
                  return true;
              };
              if (x instanceof W && y instanceof W) {
                  return true;
              };
              return false;
          };
      }
  };
  var eqAppMode = {
      eq: function (x) {
          return function (y) {
              if (x instanceof InsertMode && y instanceof InsertMode) {
                  return true;
              };
              if (x instanceof EditMode && y instanceof EditMode) {
                  return true;
              };
              if (x instanceof DialogMode && y instanceof DialogMode) {
                  return true;
              };
              return false;
          };
      }
  };
  exports["M"] = M;
  exports["W"] = W;
  exports["Deutsch"] = Deutsch;
  exports["Englisch"] = Englisch;
  exports["NothingYet"] = NothingYet;
  exports["Failed"] = Failed;
  exports["Success"] = Success;
  exports["InsertMode"] = InsertMode;
  exports["EditMode"] = EditMode;
  exports["DialogMode"] = DialogMode;
  exports["initialModel"] = initialModel;
  exports["Input"] = Input;
  exports["GoEdit"] = GoEdit;
  exports["AddTitel"] = AddTitel;
  exports["InputTitel"] = InputTitel;
  exports["OpenDialog"] = OpenDialog;
  exports["CloseDialog"] = CloseDialog;
  exports["ChangeGeschlecht"] = ChangeGeschlecht;
  exports["ChangeVorname"] = ChangeVorname;
  exports["ChangeNachname"] = ChangeNachname;
  exports["ChangeSprache"] = ChangeSprache;
  exports["ChangeTitel"] = ChangeTitel;
  exports["Save"] = Save;
  exports["Insert"] = Insert;
  exports["Edit"] = Edit;
  exports["Dialog"] = Dialog;
  exports["eqSprache"] = eqSprache;
  exports["showSprache"] = showSprache;
  exports["eqGeschlecht"] = eqGeschlecht;
  exports["showGeschlecht"] = showGeschlecht;
  exports["eqAppMode"] = eqAppMode;
  exports["showMsg"] = showMsg;
  exports["geschlechtReadForeign"] = geschlechtReadForeign;
  exports["spracheReadForeign"] = spracheReadForeign;
  exports["spracheWriteForeign"] = spracheWriteForeign;
  exports["geschlechtWriteForeign"] = geschlechtWriteForeign;
})(PS);
(function($PS) {
  "use strict";
  $PS["Kontaktsplitter"] = $PS["Kontaktsplitter"] || {};
  var exports = $PS["Kontaktsplitter"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var Types = $PS["Types"];                
  var toBriefAnrede = Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
      reflectSymbol: function () {
          return "geschlecht";
      }
  })(Data_Show.showRecordFieldsCons({
      reflectSymbol: function () {
          return "nachname";
      }
  })(Data_Show.showRecordFieldsCons({
      reflectSymbol: function () {
          return "sprache";
      }
  })(Data_Show.showRecordFieldsCons({
      reflectSymbol: function () {
          return "titel";
      }
  })(Data_Show.showRecordFieldsCons({
      reflectSymbol: function () {
          return "vorname";
      }
  })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showString)))(Data_Show.showArray(Data_Show.showString)))(Types.showSprache))(Data_Show.showString))(Data_Maybe.showMaybe(Types.showGeschlecht))));
  var pKontakt = function (dat) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("a"))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("b"))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("B")))(function (b) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))({
                  geschlecht: Data_Maybe.Nothing.value,
                  titel: [ "Dr.", "Prof." ],
                  sprache: Types.Deutsch.value,
                  vorname: Data_Maybe.Nothing.value,
                  nachname: ""
              });
          });
      });
  };

  //----------------- KONTAKTSPLITTER  ------------------
  var parseKontakt = function (dat) {
      var showError = function (v) {
          if (v instanceof Data_Either.Left) {
              return new Types.Failed(Text_Parsing_Parser.parseErrorMessage(v.value0));
          };
          if (v instanceof Data_Either.Right) {
              return new Types.Success(v.value0);
          };
          throw new Error("Failed pattern match at Kontaktsplitter (line 16, column 3 - line 16, column 56): " + [ v.constructor.name ]);
      };
      var $4 = Data_Function.flip(Text_Parsing_Parser.runParser)(pKontakt(dat));
      return function ($5) {
          return showError($4($5));
      };
  };
  exports["parseKontakt"] = parseKontakt;
  exports["toBriefAnrede"] = toBriefAnrede;
})(PS);
(function($PS) {
  "use strict";
  $PS["Style"] = $PS["Style"] || {};
  var exports = $PS["Style"];
  var Concur_Core_LiftWidget = $PS["Concur.Core.LiftWidget"];
  var Concur_Core_Props = $PS["Concur.Core.Props"];
  var Concur_Core_Types = $PS["Concur.Core.Types"];
  var Concur_React_DOM = $PS["Concur.React.DOM"];
  var Concur_React_MUI_DOM = $PS["Concur.React.MUI.DOM"];
  var Concur_React_Props = $PS["Concur.React.Props"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var React_DOM_Props = $PS["React.DOM.Props"];                
  var unsafeTargetArray = function (e) {
      return e.target.value;
  };

  // | A Text input that has a button attached
  // | Returns its contents on the user pressing enter, or clicking the button
  // | Inspired by <https://github.com/purescript-concur/purescript-concur-react/blob/v0.4.2/src/Concur/React/Widgets.purs#L30-L35>
  var textFieldWithSubmit = function (val) {
      return function (butLabel) {
          return function (inpProps) {
              return function (butProps) {
                  return Concur_React_DOM.div(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.style({
                      display: "flex"
                  }) ])([ Concur_React_MUI_DOM.textField(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(inpProps)([ Data_Functor.voidRight(Concur_Core_Props.functorProps)(Data_Maybe.Nothing.value)(Concur_React_Props.onKeyEnter), Data_Functor.map(Concur_Core_Props.functorProps)(function ($18) {
                      return Data_Maybe.Just.create(Concur_React_Props.unsafeTargetValue($18));
                  })(Concur_React_Props.onChange), Concur_React_Props.value(val), Concur_React_Props.style({
                      flexGrow: "1"
                  }), Concur_React_Props.unsafeMkProp("variant")("outlined") ]))([  ]), Concur_React_MUI_DOM.button(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(butProps)([ Data_Functor.voidRight(Concur_Core_Props.functorProps)(Data_Maybe.Nothing.value)(Concur_React_Props.onClick), Concur_React_Props.color("primary"), Concur_React_Props.unsafeMkProp("variant")("contained"), Concur_React_Props.style({
                      marginLeft: "1rem",
                      height: "56px"
                  }) ]))([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)(butLabel) ]) ]);
              };
          };
      };
  };

  // https://github.com/labordynamicsinstitute/metajelo-ui/blob/master/src/Metajelo/FormUtil.purs
  var select = function (dictEq) {
      return function (props) {
          return function (selected) {
              return function (opts) {
                  var unsafeFind = function (a) {
                      return (Data_Maybe.fromJust()(Data_Foldable.find(Data_Foldable.foldableArray)((function () {
                          var $19 = Data_Eq.eq(Data_Eq.eqString)(a);
                          return function ($20) {
                              return $19((function (v) {
                                  return v.l;
                              })($20));
                          };
                      })())(opts))).t;
                  };
                  var findSelected = (Data_Maybe.fromJust()(Data_Foldable.find(Data_Foldable.foldableArray)((function () {
                      var $21 = Data_Eq.eq(dictEq)(selected);
                      return function ($22) {
                          return $21((function (v) {
                              return v.t;
                          })($22));
                      };
                  })())(opts))).l;
                  return Concur_React_MUI_DOM.select(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Data_Functor.map(Concur_Core_Props.functorProps)(function ($23) {
                      return unsafeFind(Concur_React_Props.unsafeTargetValue($23));
                  })(Concur_React_Props.onChange), Concur_React_Props.value(findSelected) ])(props))(Data_Functor.map(Data_Functor.functorArray)(function (v) {
                      return Concur_React_MUI_DOM.menuItem(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.value(v.l) ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)(v.l) ]);
                  })(opts));
              };
          };
      };
  };
  var renderValue = function (val) {
      return new Concur_Core_Props.PrimProp(React_DOM_Props.unsafeMkProps("renderValue")(function (v) {
          return val;
      }));
  };

  // | A multi select widget
  // | props: Zusätzliche Props für das Dropdown 
  // | selected: Ausgewählte Einträge 
  // | opts: Verfügbare Optionen 
  var multiSelect = function (dictEq) {
      return function (dictShow) {
          return function (dictReadForeign) {
              return function (props) {
                  return function (selected) {
                      return function (opts) {
                          var unsafeFind = function (a) {
                              return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
                                  return v.t;
                              })(Data_Foldable.find(Data_Foldable.foldableArray)((function () {
                                  var $24 = Data_Eq.eq(Data_Eq.eqString)(a);
                                  return function ($25) {
                                      return $24((function (v) {
                                          return v.l;
                                      })($25));
                                  };
                              })())(opts));
                          };
                          var isSelected = function (a) {
                              return Data_Array.elem(dictEq)(a)(selected);
                          };
                          var selectedLabels = Data_Functor.map(Data_Functor.functorArray)(function (v) {
                              return v.l;
                          })(Data_Array.filter(function ($26) {
                              return isSelected((function (v) {
                                  return v.t;
                              })($26));
                          })(opts));
                          return Concur_React_MUI_DOM.select(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Concur_React_Props.multiple(true), Concur_React_Props.valueArray(selectedLabels), renderValue(Data_Array.intercalate(Data_Monoid.monoidString)(" ")(selectedLabels)), Data_Functor.map(Concur_Core_Props.functorProps)((function () {
                              var $27 = Data_Array.mapMaybe(unsafeFind);
                              return function ($28) {
                                  return $27(unsafeTargetArray($28));
                              };
                          })())(Concur_React_Props.onChange) ])(props))(Data_Functor.map(Data_Functor.functorArray)(function (v) {
                              return Concur_React_MUI_DOM.menuItem(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.key(Data_Show.show(dictShow)(v.t)), Concur_React_Props.value(v.l) ])([ Concur_React_MUI_DOM.checkbox(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.checked(isSelected(v.t)) ])([  ]), Concur_React_MUI_DOM.listItemText(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.unsafeMkProp("primary")(v.l) ])([  ]) ]);
                          })(opts));
                      };
                  };
              };
          };
      };
  };
  var kontaktCSS = "\x0a.header { \x0a  display: flex\x0a} \x0a.header h4 {\x0a  margin-right: auto;\x0a  flex-grow: 1;\x0a}\x0a.header a { margin-left: 1rem; }\x0a\x0a.content > * {\x0a  margin-top: 2rem;\x0a}\x0a.input-edit > * {\x0a  margin-top: 2rem;\x0a}\x0a.msg {\x0a    display: flex;\x0a    align-items: center;\x0a    justify-content: center;\x0a    padding: 1rem;\x0a}\x0a.edit-view { \x0a    display: flex; \x0a    justify-content: space-between \x0a}\x0a/* .edit-view > *:not(:last-child) { margin-right: 1rem; } */\x0a.result-head * {\x0a    font-weight: bold;\x0a}\x0a";
  var formControl = function (id) {
      return function (label) {
          return function (ctrl) {
              return Concur_React_MUI_DOM.formControl(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.unsafeMkProp("variant")("outlined") ])([ Concur_React_MUI_DOM.inputLabel(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.htmlFor(id) ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)(label) ]), ctrl ]);
          };
      };
  };
  exports["kontaktCSS"] = kontaktCSS;
  exports["formControl"] = formControl;
  exports["select"] = select;
  exports["multiSelect"] = multiSelect;
  exports["textFieldWithSubmit"] = textFieldWithSubmit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Concur_Core_LiftWidget = $PS["Concur.Core.LiftWidget"];
  var Concur_Core_Props = $PS["Concur.Core.Props"];
  var Concur_Core_Types = $PS["Concur.Core.Types"];
  var Concur_React_DOM = $PS["Concur.React.DOM"];
  var Concur_React_MUI_DOM = $PS["Concur.React.MUI.DOM"];
  var Concur_React_Props = $PS["Concur.React.Props"];
  var Concur_React_Run = $PS["Concur.React.Run"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_MultiAlternative = $PS["Control.MultiAlternative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var FFI = $PS["FFI"];
  var Kontaktsplitter = $PS["Kontaktsplitter"];
  var Simple_JSON = $PS["Simple.JSON"];
  var Style = $PS["Style"];
  var Types = $PS["Types"];                
  var update = function (model) {
      return function (v) {
          if (v instanceof Types.Insert) {
              if (v.value0 instanceof Types.Input) {
                  return {
                      "_data": model["_data"],
                      state: Kontaktsplitter.parseKontakt(model["_data"])(v.value0.value0),
                      inputRaw: v.value0.value0,
                      mode: model.mode,
                      titelInputRaw: model.titelInputRaw,
                      prevMode: model.prevMode
                  };
              };
              if (v.value0 instanceof Types.GoEdit) {
                  return {
                      "_data": model["_data"],
                      state: model.state,
                      inputRaw: model.inputRaw,
                      mode: Types.EditMode.value,
                      titelInputRaw: model.titelInputRaw,
                      prevMode: model.prevMode
                  };
              };
              throw new Error("Failed pattern match at Main (line 262, column 29 - line 264, column 38): " + [ v.value0.constructor.name ]);
          };
          if (v instanceof Types.Edit) {
              if (model.state instanceof Types.Success) {
                  if (v.value0 instanceof Types.ChangeGeschlecht) {
                      return {
                          "_data": model["_data"],
                          state: new Types.Success({
                              geschlecht: v.value0.value0,
                              titel: model.state.value0.titel,
                              sprache: model.state.value0.sprache,
                              vorname: model.state.value0.vorname,
                              nachname: model.state.value0.nachname
                          }),
                          inputRaw: model.inputRaw,
                          mode: model.mode,
                          titelInputRaw: model.titelInputRaw,
                          prevMode: model.prevMode
                      };
                  };
                  if (v.value0 instanceof Types.ChangeVorname) {
                      return {
                          "_data": model["_data"],
                          state: new Types.Success({
                              geschlecht: model.state.value0.geschlecht,
                              titel: model.state.value0.titel,
                              sprache: model.state.value0.sprache,
                              vorname: v.value0.value0,
                              nachname: model.state.value0.nachname
                          }),
                          inputRaw: model.inputRaw,
                          mode: model.mode,
                          titelInputRaw: model.titelInputRaw,
                          prevMode: model.prevMode
                      };
                  };
                  if (v.value0 instanceof Types.ChangeNachname) {
                      return {
                          "_data": model["_data"],
                          state: new Types.Success({
                              geschlecht: model.state.value0.geschlecht,
                              titel: model.state.value0.titel,
                              sprache: model.state.value0.sprache,
                              vorname: model.state.value0.vorname,
                              nachname: v.value0.value0
                          }),
                          inputRaw: model.inputRaw,
                          mode: model.mode,
                          titelInputRaw: model.titelInputRaw,
                          prevMode: model.prevMode
                      };
                  };
                  if (v.value0 instanceof Types.ChangeSprache) {
                      return {
                          "_data": model["_data"],
                          state: new Types.Success({
                              geschlecht: model.state.value0.geschlecht,
                              titel: model.state.value0.titel,
                              sprache: v.value0.value0,
                              vorname: model.state.value0.vorname,
                              nachname: model.state.value0.nachname
                          }),
                          inputRaw: model.inputRaw,
                          mode: model.mode,
                          titelInputRaw: model.titelInputRaw,
                          prevMode: model.prevMode
                      };
                  };
                  if (v.value0 instanceof Types.ChangeTitel) {
                      return {
                          "_data": model["_data"],
                          state: new Types.Success({
                              geschlecht: model.state.value0.geschlecht,
                              titel: v.value0.value0,
                              sprache: model.state.value0.sprache,
                              vorname: model.state.value0.vorname,
                              nachname: model.state.value0.nachname
                          }),
                          inputRaw: model.inputRaw,
                          mode: model.mode,
                          titelInputRaw: model.titelInputRaw,
                          prevMode: model.prevMode
                      };
                  };
                  if (v.value0 instanceof Types.Save) {
                      return {
                          "_data": {
                              anreden: Data_Array.cons(model.state.value0)(model["_data"].anreden),
                              titel: model["_data"].titel
                          },
                          state: Types.NothingYet.value,
                          inputRaw: "",
                          mode: Types.InsertMode.value,
                          titelInputRaw: model.titelInputRaw,
                          prevMode: model.prevMode
                      };
                  };
                  throw new Error("Failed pattern match at Main (line 267, column 21 - line 281, column 10): " + [ v.value0.constructor.name ]);
              };
              return model;
          };
          if (v instanceof Types.Dialog) {
              if (v.value0 instanceof Types.OpenDialog) {
                  return {
                      "_data": model["_data"],
                      state: model.state,
                      inputRaw: model.inputRaw,
                      mode: Types.DialogMode.value,
                      titelInputRaw: model.titelInputRaw,
                      prevMode: new Data_Maybe.Just(model.mode)
                  };
              };
              if (v.value0 instanceof Types.CloseDialog) {
                  return {
                      "_data": model["_data"],
                      state: model.state,
                      inputRaw: model.inputRaw,
                      mode: Data_Maybe.fromMaybe(Types.InsertMode.value)(model.prevMode),
                      titelInputRaw: model.titelInputRaw,
                      prevMode: Data_Maybe.Nothing.value
                  };
              };
              if (v.value0 instanceof Types.InputTitel) {
                  return {
                      "_data": model["_data"],
                      state: model.state,
                      inputRaw: model.inputRaw,
                      mode: model.mode,
                      titelInputRaw: v.value0.value0,
                      prevMode: model.prevMode
                  };
              };
              if (v.value0 instanceof Types.AddTitel) {
                  return {
                      "_data": {
                          anreden: model["_data"].anreden,
                          titel: Data_Array.nub(Data_Ord.ordString)(Data_Array.snoc(model["_data"].titel)(Data_String_Common.trim(model.titelInputRaw)))
                      },
                      state: model.state,
                      inputRaw: model.inputRaw,
                      mode: model.mode,
                      titelInputRaw: "",
                      prevMode: model.prevMode
                  };
              };
              throw new Error("Failed pattern match at Main (line 284, column 29 - line 303, column 8): " + [ v.value0.constructor.name ]);
          };
          throw new Error("Failed pattern match at Main (line 261, column 1 - line 261, column 32): " + [ model.constructor.name, v.constructor.name ]);
      };
  };
  var optionals = function (dictMonoid) {
      return function (v) {
          if (v) {
              return Control_Category.identity(Control_Category.categoryFn);
          };
          if (!v) {
              return Data_Function["const"](Data_Monoid.mempty(dictMonoid));
          };
          throw new Error("Failed pattern match at Main (line 351, column 1 - line 351, column 53): " + [ v.constructor.name ]);
      };
  };
  var nothingIfEmpty = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(v);
  };
  var mayShow = Data_Maybe.fromMaybe("-");
  var localStorageKey = "kontakte";
  var isSuccess = function (v) {
      if (v instanceof Types.Success) {
          return true;
      };
      return false;
  };
  var inputView = function (model) {
      return Concur_React_DOM.div(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.style({
          display: "flex"
      }) ])([ Data_Functor.map(Concur_Core_Types.widgetFunctor)(function ($58) {
          return Types.Insert.create(Types.Input.create($58));
      })(Concur_React_MUI_DOM.textField(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.label("Kontakt hier eingeben"), Concur_React_Props.value(model.inputRaw), Concur_React_Props.placeholder("Herr Dr. Peter Pan"), Data_Functor.map(Concur_Core_Props.functorProps)(Concur_React_Props.unsafeTargetValue)(Concur_React_Props.onChange), Concur_React_Props.disabled(Data_Eq.eq(Types.eqAppMode)(model.mode)(Types.EditMode.value)), Concur_React_Props.style({
          flexGrow: "1"
      }), Concur_React_Props.unsafeMkProp("variant")("outlined") ])([  ])), Data_Functor.voidRight(Concur_Core_Types.widgetFunctor)(new Types.Insert(Types.GoEdit.value))(Concur_React_MUI_DOM.button(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.color("primary"), Concur_React_Props.unsafeMkProp("variant")("contained"), Concur_React_Props.style({
          marginLeft: "1rem"
      }), Concur_React_Props.disabled(Data_Eq.eq(Types.eqAppMode)(model.mode)(Types.EditMode.value) || !isSuccess(model.state)), Concur_React_Props.onClick ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)("\u270f Bearbeiten") ])), Data_Functor.voidRight(Concur_Core_Types.widgetFunctor)(new Types.Dialog(Types.OpenDialog.value))(Concur_React_MUI_DOM.button(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.color("secondary"), Concur_React_Props.unsafeMkProp("variant")("contained"), Concur_React_Props.style({
          marginLeft: "1rem"
      }), Concur_React_Props.onClick ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)("\u2795 Titel hinzuf\xfcgen") ])) ]);
  };
  var eitherToMaybe = function (v) {
      if (v instanceof Data_Either.Left) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_Either.Right) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Main (line 333, column 1 - line 333, column 51): " + [ v.constructor.name ]);
  };
  var editView = function (model) {
      if (model.state instanceof Types.Success) {
          var formValid = !Data_String_Common["null"](model.state.value0.nachname);
          var disabled = Data_Eq.eq(Types.eqAppMode)(model.mode)(Types.InsertMode.value);
          return Concur_React_DOM.div(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.className("edit-view") ])([ Data_Functor.map(Concur_Core_Types.widgetFunctor)(Types.ChangeNachname.create)(Concur_React_MUI_DOM.textField(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Concur_React_Props.label("Nachname"), Concur_React_Props.disabled(disabled), Concur_React_Props.value(model.state.value0.nachname), Concur_React_Props.unsafeMkProp("variant")("outlined"), Data_Functor.map(Concur_Core_Props.functorProps)(Concur_React_Props.unsafeTargetValue)(Concur_React_Props.onChange) ])(optionals(Data_Monoid.monoidArray)(!(formValid || disabled))([ Concur_React_Props.unsafeMkProp("error")("true"), Concur_React_Props.unsafeMkProp("helperText")("Nachname muss ausgef\xfcllt werden!") ])))([  ])), Data_Functor.map(Concur_Core_Types.widgetFunctor)(function ($59) {
              return Types.ChangeVorname.create(nothingIfEmpty($59));
          })(Concur_React_MUI_DOM.textField(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.label("Vorname"), Concur_React_Props.disabled(disabled), Concur_React_Props.value(Data_Maybe.fromMaybe("")(model.state.value0.vorname)), Concur_React_Props.unsafeMkProp("variant")("outlined"), Data_Functor.map(Concur_Core_Props.functorProps)(Concur_React_Props.unsafeTargetValue)(Concur_React_Props.onChange) ])([  ])), Data_Functor.map(Concur_Core_Types.widgetFunctor)(Types.ChangeTitel.create)(Style.formControl("titel")("Titel")(Style.multiSelect(Data_Eq.eqString)(Data_Show.showString)(Simple_JSON.readString)([ Concur_React_Props.label("titel"), Concur_React_Props.disabled(disabled), Concur_React_Props.style({
              width: "250px"
          }) ])(model.state.value0.titel)(Data_Functor.map(Data_Functor.functorArray)(function (titel) {
              return {
                  t: titel,
                  l: titel
              };
          })(model["_data"].titel)))), Data_Functor.map(Concur_Core_Types.widgetFunctor)(Types.ChangeGeschlecht.create)(Style.formControl("geschlecht")("Geschlecht")(Style.select(Data_Maybe.eqMaybe(Types.eqGeschlecht))([ Concur_React_Props.label("Geschlecht"), Concur_React_Props.disabled(disabled), Concur_React_Props.style({
              width: "150px"
          }) ])(model.state.value0.geschlecht)([ {
              l: "Keine Angabe",
              t: Data_Maybe.Nothing.value
          }, {
              l: "M",
              t: new Data_Maybe.Just(Types.M.value)
          }, {
              l: "W",
              t: new Data_Maybe.Just(Types.W.value)
          } ]))), Data_Functor.map(Concur_Core_Types.widgetFunctor)(Types.ChangeSprache.create)(Style.formControl("sprache")("Sprache")(Style.select(Types.eqSprache)([ Concur_React_Props.label("sprache"), Concur_React_Props.disabled(disabled) ])(model.state.value0.sprache)([ {
              l: "Deutsch",
              t: Types.Deutsch.value
          }, {
              l: "Englisch",
              t: Types.Englisch.value
          } ]))), Data_Functor.voidRight(Concur_Core_Types.widgetFunctor)(Types.Save.value)(Concur_React_MUI_DOM.button(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.color("primary"), Concur_React_Props.unsafeMkProp("variant")("contained"), Concur_React_Props.disabled(disabled || !formValid), Concur_React_Props.onClick ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)("\u2714 Speichern") ])) ]);
      };
      return Concur_React_MUI_DOM.paper(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.className("msg"), Concur_React_Props.style({
          backgroundColor: (function () {
              if (model.state instanceof Types.NothingYet) {
                  return "lightgray";
              };
              return "red";
          })()
      }), Concur_React_Props.unsafeMkProp("variant")("outlined") ])((function () {
          if (model.state instanceof Types.Failed) {
              return [ Concur_React_MUI_DOM.typography(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.unsafeMkProp("variant")("h6") ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)(model.state.value0) ]) ];
          };
          return [ Concur_React_MUI_DOM.typography(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.unsafeMkProp("variant")("h6") ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)("Bitte Kontakt eingeben!") ]) ];
      })());
  };
  var dialogView = function (model) {
      var formValid = !Data_String_Common["null"](model.titelInputRaw);
      return Concur_React_MUI_DOM.dialog(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.open(Data_Eq.eq(Types.eqAppMode)(model.mode)(Types.DialogMode.value)), Data_Functor.voidRight(Concur_Core_Props.functorProps)(Types.CloseDialog.value)(Concur_React_Props.unsafeMkPropHandler("onClose")) ])([ Concur_React_MUI_DOM.dialogTitle(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([  ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)("Titel hinzuf\xfcgen") ]), Concur_React_MUI_DOM.dialogContent(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([  ])([ Concur_React_MUI_DOM.dialogContentText(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([  ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)("Hier k\xf6nnen Titel wie \"Dr. med.\" hinzugef\xfcgt werden. ") ]), Data_Functor.map(Concur_Core_Types.widgetFunctor)(Data_Maybe.maybe(Types.AddTitel.value)(Types.InputTitel.create))(Style.textFieldWithSubmit(model.titelInputRaw)("\u2714 Hinzuf\xfcgen")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Concur_React_Props.label("Titel"), Concur_React_Props.placeholder("Dr. med.") ])(optionals(Data_Monoid.monoidArray)(!formValid)([ Concur_React_Props.unsafeMkProp("error")("true"), Concur_React_Props.unsafeMkProp("helperText")("Titel darf nicht leer sein!") ])))([ Concur_React_Props.disabled(!formValid) ])), Concur_React_MUI_DOM.divider(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.style({
          margin: "1rem 0"
      }) ])([  ]), Concur_React_MUI_DOM.typography(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.unsafeMkProp("variant")("subtitle2"), Concur_React_Props.style({
          marginTop: ".5rem"
      }) ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)("Vorhandene Titel") ]), Concur_React_MUI_DOM.list(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.unsafeMkProp("dense")("true"), Concur_React_Props.style({
          maxHeight: "250px"
      }) ])(Data_Functor.map(Data_Functor.functorArray)(function (titel) {
          return Concur_React_MUI_DOM.listItem(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([  ])([ Concur_React_MUI_DOM.listItemText(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.unsafeMkProp("primary")(titel) ])([  ]) ]);
      })(model["_data"].titel)) ]), Data_Functor.voidRight(Concur_Core_Types.widgetFunctor)(Types.CloseDialog.value)(Concur_React_MUI_DOM.dialogActions(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([  ])([ Concur_React_MUI_DOM.button(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.onClick, Concur_React_Props.color("primary") ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)("OK") ]) ])) ]);
  };
  var anredenView = function (anreden) {
      var mkCellRAlign = function (cnt) {
          return Concur_React_MUI_DOM.tableCell(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.unsafeMkProp("align")("right") ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)(cnt) ]);
      };
      var mkCell = function (cnt) {
          return Concur_React_MUI_DOM.tableCell(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([  ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)(cnt) ]);
      };
      return Concur_React_MUI_DOM.table(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.className("results"), Concur_React_Props.unsafeMkProp("size")("small") ])([ Concur_React_MUI_DOM.tableHead(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([  ])([ Concur_React_MUI_DOM.tableRow(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.className("result-head") ])([ mkCell("Nachname"), mkCell("Vorname"), mkCellRAlign("Geschlecht"), mkCellRAlign("Sprache"), mkCell("Briefanrede") ]) ]), Concur_React_MUI_DOM.tableBody(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([  ])(Data_Functor.map(Data_Functor.functorArray)(function (anr) {
          return Concur_React_MUI_DOM.tableRow(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([  ])([ mkCell(anr.nachname), mkCell(mayShow(anr.vorname)), mkCellRAlign(mayShow(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Show.show(Types.showGeschlecht))(anr.geschlecht))), mkCellRAlign(Data_Show.show(Types.showSprache)(anr.sprache)), mkCell(Kontaktsplitter.toBriefAnrede(anr)) ]);
      })(anreden)) ]);
  };
  var view = function (model) {
      return Control_MultiAlternative.orr(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))([ Concur_React_DOM.style(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([  ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)(Style.kontaktCSS) ]), Concur_React_MUI_DOM.appBar(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([  ])([ Concur_React_MUI_DOM.toolbar(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([  ])([ Concur_React_MUI_DOM.container(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.className("header") ])([ Concur_React_MUI_DOM.typography(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.unsafeMkProp("variant")("h4") ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)("Kontaktsplitter") ]), Concur_React_MUI_DOM.button(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.href("docs.html"), Concur_React_Props.unsafeMkProp("variant")("contained") ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)("Dokumentation") ]), Concur_React_MUI_DOM.button(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.href("tests.html"), Concur_React_Props.unsafeMkProp("variant")("contained") ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)("Testergebnisse") ]), Concur_React_MUI_DOM.button(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.href("https://github.com/Matthi42/swq/blob/master/src/Main.purs"), Concur_React_Props.unsafeMkProp("variant")("contained") ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)("Sourcecode") ]), Concur_React_MUI_DOM.button(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.href("https://github.com/Matthi42/swq/blob/master/test/Main.purs"), Concur_React_Props.unsafeMkProp("variant")("contained") ])([ Concur_React_DOM.text(Concur_Core_LiftWidget.widgetLiftWidget)("Testcode") ]) ]) ]) ]), Concur_React_MUI_DOM.container(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.style({
          marginTop: "100px"
      }), Concur_React_Props.className("content") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Concur_React_DOM.div(Concur_Core_Types.widgetMultiAlternative(Data_Monoid.monoidArray))(Concur_Core_Types.widgetShiftMap)([ Concur_React_Props.className("input-edit") ])([ inputView(model), Data_Functor.map(Concur_Core_Types.widgetFunctor)(Types.Edit.create)(editView(model)), Data_Functor.map(Concur_Core_Types.widgetFunctor)(Types.Dialog.create)(dialogView(model)) ]) ])(optionals(Data_Monoid.monoidArray)(!Data_Foldable["null"](Data_Foldable.foldableArray)(model["_data"].anreden))([ anredenView(model["_data"].anreden) ]))) ]);
  };
  var main = function __do() {
      var dataInStorage = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(FFI.storageGet(localStorageKey))();
      var writeToStorage = (function () {
          var $60 = Effect_Class.liftEffect(Concur_Core_Types.widgetMonadEff(Data_Monoid.monoidArray));
          var $61 = FFI.storageSet(localStorageKey);
          var $62 = Simple_JSON.writeJSON(Simple_JSON.recordWriteForeign()(Simple_JSON.consWriteForeignFields({
              reflectSymbol: function () {
                  return "anreden";
              }
          })(Simple_JSON.writeForeignArray(Simple_JSON.recordWriteForeign()(Simple_JSON.consWriteForeignFields({
              reflectSymbol: function () {
                  return "geschlecht";
              }
          })(Simple_JSON.writeForeignMaybe(Types.geschlechtWriteForeign))(Simple_JSON.consWriteForeignFields({
              reflectSymbol: function () {
                  return "nachname";
              }
          })(Simple_JSON.writeForeignString)(Simple_JSON.consWriteForeignFields({
              reflectSymbol: function () {
                  return "sprache";
              }
          })(Types.spracheWriteForeign)(Simple_JSON.consWriteForeignFields({
              reflectSymbol: function () {
                  return "titel";
              }
          })(Simple_JSON.writeForeignArray(Simple_JSON.writeForeignString))(Simple_JSON.consWriteForeignFields({
              reflectSymbol: function () {
                  return "vorname";
              }
          })(Simple_JSON.writeForeignMaybe(Simple_JSON.writeForeignString))(Simple_JSON.nilWriteForeignFields)()()())()()())()()())()()())()()())))(Simple_JSON.consWriteForeignFields({
              reflectSymbol: function () {
                  return "titel";
              }
          })(Simple_JSON.writeForeignArray(Simple_JSON.writeForeignString))(Simple_JSON.nilWriteForeignFields)()()())()()()));
          return function ($63) {
              return $60($61($62($63)));
          };
      })();
      var stored = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)((function () {
          var $64 = Simple_JSON.readJSON(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons({
              reflectSymbol: function () {
                  return "anreden";
              }
          })(Simple_JSON.readArray(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons({
              reflectSymbol: function () {
                  return "geschlecht";
              }
          })(Simple_JSON.readMaybe(Types.geschlechtReadForeign))(Simple_JSON.readFieldsCons({
              reflectSymbol: function () {
                  return "nachname";
              }
          })(Simple_JSON.readString)(Simple_JSON.readFieldsCons({
              reflectSymbol: function () {
                  return "sprache";
              }
          })(Types.spracheReadForeign)(Simple_JSON.readFieldsCons({
              reflectSymbol: function () {
                  return "titel";
              }
          })(Simple_JSON.readArray(Simple_JSON.readString))(Simple_JSON.readFieldsCons({
              reflectSymbol: function () {
                  return "vorname";
              }
          })(Simple_JSON.readMaybe(Simple_JSON.readString))(Simple_JSON.readFieldsNil)()())()())()())()())()())))(Simple_JSON.readFieldsCons({
              reflectSymbol: function () {
                  return "titel";
              }
          })(Simple_JSON.readArray(Simple_JSON.readString))(Simple_JSON.readFieldsNil)()())()()));
          return function ($65) {
              return eitherToMaybe($64($65));
          };
      })())(Data_Nullable.toMaybe(dataInStorage));
      var model = (function () {
          if (stored instanceof Data_Maybe.Just) {
              return {
                  "_data": stored.value0,
                  inputRaw: Types.initialModel.inputRaw,
                  mode: Types.initialModel.mode,
                  prevMode: Types.initialModel.prevMode,
                  state: Types.initialModel.state,
                  titelInputRaw: Types.initialModel.titelInputRaw
              };
          };
          if (stored instanceof Data_Maybe.Nothing) {
              return Types.initialModel;
          };
          throw new Error("Failed pattern match at Main (line 315, column 13 - line 317, column 30): " + [ stored.constructor.name ]);
      })();
      var go = function (m) {
          return Control_Bind.bind(Concur_Core_Types.widgetBind)(view(m))(function (msg) {
              var v = Effect_Unsafe.unsafePerformEffect(Effect_Console.logShow(Types.showMsg)(msg));
              var model$prime = update(m)(msg);
              return Control_Bind.discard(Control_Bind.discardUnit)(Concur_Core_Types.widgetBind)(writeToStorage(model$prime["_data"]))(function () {
                  return go(model$prime);
              });
          });
      };
      return Concur_React_Run.runWidgetInDom("main")(go(model))();
  };
  exports["view"] = view;
  exports["inputView"] = inputView;
  exports["editView"] = editView;
  exports["anredenView"] = anredenView;
  exports["dialogView"] = dialogView;
  exports["update"] = update;
  exports["localStorageKey"] = localStorageKey;
  exports["main"] = main;
  exports["eitherToMaybe"] = eitherToMaybe;
  exports["mayShow"] = mayShow;
  exports["isSuccess"] = isSuccess;
  exports["nothingIfEmpty"] = nothingIfEmpty;
  exports["optionals"] = optionals;
})(PS);
PS["Main"].main();